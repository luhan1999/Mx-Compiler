		global	main

		extern	malloc

		section	.bss
__static_data_Mod_1:	resq	1
__static_data_p_1:	resq	1
__static_data_res_1:	resq	1
__static_data_ksm_1:	resq	1
__static_data_prime_1:	resq	1
__static_data_tot_1:	resq	1
__static_data_v_1:	resq	1
__static_data_q_1:	resq	1
__static_data_g_1:	resq	1
__static_data_Sum_1:	resq	1
__static_data_m_1:	resq	1
__static_data_b_1:	resq	1
__static_data_Comb_1:	resq	1
__static_data_C_1:	resq	1
__static_data_M_1:	resq	1
__static_data_N_1:	resq	1
__static_data_fn_1:	resq	1
__static_data_fc_1:	resq	1
__static_data_fm_1:	resq	1

		section	.text

# function Calculate_Ksm

__block_Calculate_Ksm_entry_1:
		push	r14
		push	r13
		push	r12
		push	r15
		push	rbx
		push	rbp
		sub		rsp, 24
		mov		rbp, rsp
		mov		r13, qword [__static_data_Mod_1]
		mov		r14, qword [__static_data_M_1]
		mov		r8, qword [__static_data_ksm_1]
		mov		qword [rbp+8], r8
		mov		r10, qword [__static_data_C_1]
		mov		r8, 1
		mov		qword [rbp], r8

__block_for_cond_1:
		mov		r8, qword [rbp]
		and		r8, -1
		and		r14, -1
		xor		rax, rax
		cmp		r8, r14
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_1

__block_for_after_1:
		add		rsp, 24
		pop		rbp
		pop		rbx
		pop		r15
		pop		r12
		pop		r13
		pop		r14
		ret

__block_for_body_1:
		mov		r8, qword [rbp]
		mov		r11, r8
		imul	r11, 8
		mov		r8, qword [rbp+8]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r12, 0
		imul	r12, 8
		add		r12, r11
		mov		qword [r12+8], 1
		mov		r8, 1
		mov		qword [rbp+16], r8

__block_for_cond_2:
		mov		r11, r10
		sub		r11, 2
		mov		r8, qword [rbp+16]
		and		r8, -1
		and		r11, -1
		xor		rax, rax
		cmp		r8, r11
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_2
		jmp		__block_for_step_1

__block_for_body_2:
		mov		r8, qword [rbp]
		mov		r11, r8
		imul	r11, 8
		mov		r8, qword [rbp+8]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r8, qword [rbp+16]
		mov		r12, r8
		imul	r12, 8
		add		r12, r11
		mov		r8, qword [rbp]
		mov		r11, r8
		imul	r11, 8
		mov		r8, qword [rbp+8]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r8, qword [rbp+16]
		mov		r15, r8
		dec		r15
		imul	r15, 8
		add		r15, r11
		mov		r15, qword [r15+8]
		mov		r8, qword [rbp]
		imul	r15, r8
		mov		rbx, r13
		mov		rax, r15
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r11, rdx
		mov		rdx, r8
		mov		qword [r12+8], r11

__block_for_step_2:
		mov		r8, qword [rbp+16]
		inc		r8
		mov		qword [rbp+16], r8
		jmp		__block_for_cond_2

__block_for_after_2:

__block_for_step_1:
		mov		r8, qword [rbp]
		inc		r8
		mov		qword [rbp], r8
		jmp		__block_for_cond_1

# function init

__block_init_entry_1:
		push	r14
		push	r13
		push	r12
		push	r15
		push	rbx
		push	rbp
		sub		rsp, 136
		mov		rbp, rsp
		mov		r8, 0
		mov		qword [rbp+32], r8
		mov		r8, 0
		mov		qword [rbp+8], r8
		mov		r8, 0
		mov		qword [rbp+120], r8
		mov		r8, 0
		mov		qword [rbp], r8
		mov		r10, 6
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 6
		mov		r8, r10
		mov		qword [rbp+24], r8
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_3:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 6
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_3

__block_for_after_3:
		mov		r10, 6
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 6
		mov		r14, r10
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_4:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 6
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_4

__block_for_after_4:
		mov		r10, 1001
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 1001
		mov		r12, r10
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_5:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 1001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_5

__block_for_after_5:
		mov		r13, 100001
		imul	r13, 8
		add		r13, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r13
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r13, rax
		mov		qword [r13], 100001
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_6:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 100001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_6
		jmp		__block_for_after_6

__block_for_body_6:
		mov		r8, qword [rbp+88]
		mov		r11, r8
		imul	r11, 8
		add		r11, r13
		mov		r10, 21
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 21
		mov		qword [r11+8], r10
		mov		r15, 0

__block_for_cond_7:
		and		r15, -1
		xor		rax, rax
		cmp		r15, 21
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_7
		jmp		__block_for_step_3

__block_for_body_7:
		mov		r8, qword [rbp+88]
		mov		r10, r8
		imul	r10, 8
		add		r10, r13
		mov		r10, qword [r10+8]
		mov		r11, r15
		imul	r11, 8
		add		r11, r10
		mov		qword [r11+8], 0

__block_for_step_4:
		inc		r15
		jmp		__block_for_cond_7

__block_for_after_7:

__block_for_step_3:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_6

__block_for_after_6:
		mov		r11, 21
		imul	r11, 8
		add		r11, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r11
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r11, rax
		mov		qword [r11], 21
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_8:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 21
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_8

__block_for_after_8:
		mov		r10, 21
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 21
		mov		r8, r10
		mov		qword [rbp+64], r8
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_9:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 21
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_9

__block_for_after_9:
		mov		r10, 100001
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 100001
		mov		r8, r10
		mov		qword [rbp+48], r8
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_10:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 100001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_10

__block_for_after_10:
		mov		r10, 1001
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 1001
		mov		r8, r10
		mov		qword [rbp+40], r8
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_11:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 1001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_11
		jmp		__block_for_after_11

__block_for_body_11:
		mov		r8, qword [rbp+88]
		mov		r10, r8
		imul	r10, 8
		mov		r8, qword [rbp+40]
		add		r10, r8
		mov		qword [r10+8], 0

__block_for_step_5:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_11

__block_for_after_11:
		mov		r10, 1001
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 1001
		mov		r8, r10
		mov		qword [rbp+104], r8
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_12:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 1001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_12

__block_for_after_12:
		mov		r10, 1001
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 1001
		mov		r8, r10
		mov		qword [rbp+56], r8
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_13:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 1001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_13
		jmp		__block_for_after_13

__block_for_body_13:
		mov		r8, qword [rbp+88]
		mov		r10, r8
		imul	r10, 8
		mov		r8, qword [rbp+56]
		add		r10, r8
		mov		qword [r10+8], 0

__block_for_step_6:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_13

__block_for_after_13:
		mov		r10, 1001
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 1001
		mov		r8, r10
		mov		qword [rbp+112], r8
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_14:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 1001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_14

__block_for_after_14:
		mov		r10, 1001
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 1001
		mov		r8, r10
		mov		qword [rbp+72], r8
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_15:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 1001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_15

__block_for_after_15:
		mov		r10, 100001
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 100001
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_16:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 100001
		setl	al
		mov		r15, rax
		cmp		r15, 1
		je		__block_for_body_16
		jmp		__block_for_after_16

__block_for_body_16:
		mov		r8, qword [rbp+88]
		mov		r15, r8
		imul	r15, 8
		add		r15, r10
		mov		qword [r15+8], 0

__block_for_step_7:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_16

__block_for_after_16:
		mov		r15, 100001
		imul	r15, 8
		add		r15, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r15
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r15, rax
		mov		qword [r15], 100001
		mov		r8, r15
		mov		qword [rbp+80], r8
		mov		r8, 0
		mov		qword [rbp+88], r8

__block_for_cond_17:
		mov		r8, qword [rbp+88]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 100001
		setl	al
		mov		r15, rax
		cmp		r15, 1
		je		__block_for_body_17
		jmp		__block_for_after_17

__block_for_body_17:
		mov		r8, qword [rbp+88]
		mov		r15, r8
		imul	r15, 8
		mov		r8, qword [rbp+80]
		add		r15, r8
		mov		qword [r15+8], 0

__block_for_step_8:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_17

__block_for_after_17:
		mov		r8, qword [rbp+48]
		mov		qword [__static_data_Comb_1], r8
		mov		qword [__static_data_fm_1], r12
		mov		r8, qword [rbp+56]
		mov		qword [__static_data_m_1], r8
		mov		r8, qword [rbp+120]
		mov		qword [__static_data_M_1], r8
		mov		qword [__static_data_v_1], r10
		mov		r8, qword [rbp+40]
		mov		qword [__static_data_fn_1], r8
		mov		r8, qword [rbp+8]
		mov		qword [__static_data_C_1], r8
		mov		r8, qword [rbp+104]
		mov		qword [__static_data_fc_1], r8
		mov		r8, qword [rbp+112]
		mov		qword [__static_data_res_1], r8
		mov		r8, qword [rbp+32]
		mov		qword [__static_data_tot_1], r8
		mov		r8, qword [rbp]
		mov		qword [__static_data_N_1], r8
		mov		r8, qword [rbp+72]
		mov		qword [__static_data_b_1], r8
		mov		r8, qword [rbp+64]
		mov		qword [__static_data_q_1], r8
		mov		r8, qword [rbp+80]
		mov		qword [__static_data_prime_1], r8
		mov		qword [__static_data_ksm_1], r13
		mov		qword [__static_data_Sum_1], r14
		mov		r8, qword [rbp+24]
		mov		qword [__static_data_g_1], r8
		mov		qword [__static_data_p_1], r11
		add		rsp, 136
		pop		rbp
		pop		rbx
		pop		r15
		pop		r12
		pop		r13
		pop		r14
		ret

__block_for_body_15:
		mov		r8, qword [rbp+88]
		mov		r10, r8
		imul	r10, 8
		mov		r8, qword [rbp+72]
		add		r10, r8
		mov		qword [r10+8], 0

__block_for_step_9:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_15

__block_for_body_14:
		mov		r8, qword [rbp+88]
		mov		r10, r8
		imul	r10, 8
		mov		r8, qword [rbp+112]
		add		r10, r8
		mov		qword [r10+8], 0

__block_for_step_10:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_14

__block_for_body_12:
		mov		r8, qword [rbp+88]
		mov		r10, r8
		imul	r10, 8
		mov		r8, qword [rbp+104]
		add		r10, r8
		mov		qword [r10+8], 0

__block_for_step_11:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_12

__block_for_body_10:
		mov		r8, qword [rbp+88]
		mov		r15, r8
		imul	r15, 8
		mov		r8, qword [rbp+48]
		add		r15, r8
		mov		r10, 21
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 21
		mov		qword [r15+8], r10
		mov		r15, 0

__block_for_cond_18:
		and		r15, -1
		xor		rax, rax
		cmp		r15, 21
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_18
		jmp		__block_for_step_12

__block_for_body_18:
		mov		r8, qword [rbp+88]
		mov		r10, r8
		imul	r10, 8
		mov		r8, qword [rbp+48]
		add		r10, r8
		mov		r10, qword [r10+8]
		mov		r8, r15
		mov		qword [rbp+16], r8
		imul	r8, 8
		mov		qword [rbp+16], r8
		add		r8, r10
		mov		qword [rbp+16], r8
		mov		qword [r8+8], 0

__block_for_step_13:
		inc		r15
		jmp		__block_for_cond_18

__block_for_after_18:

__block_for_step_12:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_10

__block_for_body_9:
		mov		r8, qword [rbp+88]
		mov		r15, r8
		imul	r15, 8
		mov		r8, qword [rbp+64]
		add		r15, r8
		mov		r10, 100001
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 100001
		mov		qword [r15+8], r10
		mov		r15, 0

__block_for_cond_19:
		and		r15, -1
		xor		rax, rax
		cmp		r15, 100001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_19
		jmp		__block_for_step_14

__block_for_body_19:
		mov		r8, qword [rbp+88]
		mov		qword [rbp+128], r8
		imul	r8, 8
		mov		qword [rbp+128], r8
		mov		r9, qword [rbp+64]
		add		r8, r9
		mov		qword [rbp+128], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+128], r8
		mov		r10, r15
		imul	r10, 8
		mov		r8, qword [rbp+128]
		add		r10, r8
		mov		qword [r10+8], 0

__block_for_step_15:
		inc		r15
		jmp		__block_for_cond_19

__block_for_after_19:

__block_for_step_14:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_9

__block_for_body_8:
		mov		r8, qword [rbp+88]
		mov		r10, r8
		imul	r10, 8
		add		r10, r11
		mov		r15, 21
		imul	r15, 8
		add		r15, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r15
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r15, rax
		mov		qword [r15], 21
		mov		qword [r10+8], r15
		mov		r15, 0

__block_for_cond_20:
		and		r15, -1
		xor		rax, rax
		cmp		r15, 21
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_20
		jmp		__block_for_step_16

__block_for_after_20:

__block_for_step_16:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_8

__block_for_body_20:
		mov		r8, qword [rbp+88]
		mov		qword [rbp+96], r8
		imul	r8, 8
		mov		qword [rbp+96], r8
		add		r8, r11
		mov		qword [rbp+96], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+96], r8
		mov		r10, r15
		imul	r10, 8
		mov		r8, qword [rbp+96]
		add		r10, r8
		mov		qword [r10+8], 0

__block_for_step_17:
		inc		r15
		jmp		__block_for_cond_20

__block_for_body_5:
		mov		r8, qword [rbp+88]
		mov		r11, r8
		imul	r11, 8
		add		r11, r12
		mov		r10, 13
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 13
		mov		qword [r11+8], r10
		mov		r15, 0

__block_for_cond_21:
		and		r15, -1
		xor		rax, rax
		cmp		r15, 13
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_21
		jmp		__block_for_step_18

__block_for_body_21:
		mov		r8, qword [rbp+88]
		mov		r11, r8
		imul	r11, 8
		add		r11, r12
		mov		r11, qword [r11+8]
		mov		r10, r15
		imul	r10, 8
		add		r10, r11
		mov		qword [r10+8], 0

__block_for_step_19:
		inc		r15
		jmp		__block_for_cond_21

__block_for_after_21:

__block_for_step_18:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_5

__block_for_body_4:
		mov		r8, qword [rbp+88]
		mov		r11, r8
		imul	r11, 8
		add		r11, r14
		mov		r10, 100001
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 100001
		mov		qword [r11+8], r10
		mov		r15, 0

__block_for_cond_22:
		and		r15, -1
		xor		rax, rax
		cmp		r15, 100001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_22
		jmp		__block_for_step_20

__block_for_after_22:

__block_for_step_20:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_4

__block_for_body_22:
		mov		r8, qword [rbp+88]
		mov		r10, r8
		imul	r10, 8
		add		r10, r14
		mov		r10, qword [r10+8]
		mov		r11, r15
		imul	r11, 8
		add		r11, r10
		mov		r10, 15
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 15
		mov		qword [r11+8], r10
		mov		r10, 0

__block_for_cond_23:
		and		r10, -1
		xor		rax, rax
		cmp		r10, 15
		setl	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_23
		jmp		__block_for_step_21

__block_for_after_23:

__block_for_step_21:
		inc		r15
		jmp		__block_for_cond_22

__block_for_body_23:
		mov		r8, qword [rbp+88]
		mov		r12, r8
		imul	r12, 8
		add		r12, r14
		mov		r12, qword [r12+8]
		mov		r11, r15
		imul	r11, 8
		add		r11, r12
		mov		r11, qword [r11+8]
		mov		r12, r10
		imul	r12, 8
		add		r12, r11
		mov		qword [r12+8], 0

__block_for_step_22:
		inc		r10
		jmp		__block_for_cond_23

__block_for_body_3:
		mov		r8, qword [rbp+88]
		mov		r11, r8
		imul	r11, 8
		mov		r8, qword [rbp+24]
		add		r11, r8
		mov		r10, 100001
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 100001
		mov		qword [r11+8], r10
		mov		r15, 0

__block_for_cond_24:
		and		r15, -1
		xor		rax, rax
		cmp		r15, 100001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_24
		jmp		__block_for_step_23

__block_for_after_24:

__block_for_step_23:
		mov		r8, qword [rbp+88]
		inc		r8
		mov		qword [rbp+88], r8
		jmp		__block_for_cond_3

__block_for_body_24:
		mov		r8, qword [rbp+88]
		mov		r10, r8
		imul	r10, 8
		mov		r8, qword [rbp+24]
		add		r10, r8
		mov		r10, qword [r10+8]
		mov		r11, r15
		imul	r11, 8
		add		r11, r10
		mov		r10, 15
		imul	r10, 8
		add		r10, 8
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	malloc
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [r10], 15
		mov		qword [r11+8], r10
		mov		r10, 0

__block_for_cond_25:
		and		r10, -1
		xor		rax, rax
		cmp		r10, 15
		setl	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_25
		jmp		__block_for_step_24

__block_for_after_25:

__block_for_step_24:
		inc		r15
		jmp		__block_for_cond_24

__block_for_body_25:
		mov		r8, qword [rbp+88]
		mov		r11, r8
		imul	r11, 8
		mov		r8, qword [rbp+24]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r12, r15
		imul	r12, 8
		add		r12, r11
		mov		r12, qword [r12+8]
		mov		r11, r10
		imul	r11, 8
		add		r11, r12
		mov		qword [r11+8], 0

__block_for_step_25:
		inc		r10
		jmp		__block_for_cond_25

# function Ksm

__block_Ksm_entry_1:
		push	r12
		push	rbx
		push	rbp
		mov		rbp, rsp
		mov		r12, qword [__static_data_Mod_1]
		and		rsi, -1
		xor		rax, rax
		cmp		rsi, 0
		sete	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_if_then_1

__block_if_after_1:
		and		rsi, -1
		xor		rax, rax
		cmp		rsi, 1
		sete	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_if_then_2
		jmp		__block_if_after_2

__block_if_then_2:
		mov		rbx, r12
		mov		rax, rdi
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r10, rdx
		mov		rdx, r8
		jmp		__block_Ksm_end_1

__block_if_after_2:
		mov		r10, rsi
		mov		rbx, rcx
		mov		rcx, 1
		sar		r10, cl
		mov		rcx, rbx
		and		r10, -1
		push	r11
		push	r10
		push	rdi
		push	rsi
		push	rdi
		mov		rdi, qword [rsp]
		mov		rsi, r10
		add		rsp, 8
		call	__block_Ksm_entry_1
		pop		rsi
		pop		rdi
		pop		r10
		pop		r11
		mov		r10, rax
		mov		rbx, 2
		mov		rax, rsi
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r11, rdx
		mov		rdx, r8
		and		r11, -1
		xor		rax, rax
		cmp		r11, 1
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_3

__block_if_else_1:
		imul	r10, r10
		mov		rbx, r12
		mov		rax, r10
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r10, rdx
		mov		rdx, r8
		jmp		__block_Ksm_end_1

__block_if_then_3:
		imul	r10, r10
		mov		rbx, r12
		mov		rax, r10
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r10, rdx
		mov		rdx, r8
		imul	r10, rdi
		mov		rbx, r12
		mov		rax, r10
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r10, rdx
		mov		rdx, r8
		jmp		__block_Ksm_end_1

__block_if_then_1:
		mov		r10, 1

__block_Ksm_end_1:
		mov		rax, r10
		pop		rbp
		pop		rbx
		pop		r12
		ret

# function Calculate_p

__block_Calculate_p_entry_1:
		push	r14
		push	r13
		push	r12
		push	r15
		push	rbx
		push	rbp
		sub		rsp, 56
		mov		rbp, rsp
		mov		r8, qword [__static_data_Mod_1]
		mov		qword [rbp+32], r8
		mov		r14, qword [__static_data_C_1]
		mov		r12, qword [__static_data_p_1]
		mov		r10, 0
		imul	r10, 8
		add		r10, r12
		mov		r10, qword [r10+8]
		mov		r11, 0
		imul	r11, 8
		add		r11, r10
		mov		qword [r11+8], 1
		mov		r10, 1
		imul	r10, 8
		add		r10, r12
		mov		r10, qword [r10+8]
		mov		r11, 1
		imul	r11, 8
		add		r11, r10
		mov		qword [r11+8], 1
		mov		r11, 1
		imul	r11, 8
		add		r11, r12
		mov		r11, qword [r11+8]
		mov		r10, 0
		imul	r10, 8
		add		r10, r11
		mov		r8, qword [rbp+32]
		mov		r11, r8
		dec		r11
		mov		qword [r10+8], r11
		mov		r8, 2
		mov		qword [rbp+40], r8

__block_for_cond_26:
		mov		r10, r14
		sub		r10, 2
		mov		r8, qword [rbp+40]
		and		r8, -1
		and		r10, -1
		xor		rax, rax
		cmp		r8, r10
		setle	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_26

__block_for_after_26:
		add		rsp, 56
		pop		rbp
		pop		rbx
		pop		r15
		pop		r12
		pop		r13
		pop		r14
		ret

__block_for_body_26:
		mov		r8, qword [rbp+32]
		mov		r10, r8
		sub		r10, 2
		push	r11
		push	r10
		mov		rax, qword [rbp+40]
		mov		rdi, rax
		mov		rsi, r10
		call	__block_Ksm_entry_1
		pop		r10
		pop		r11
		mov		r11, rax
		mov		r13, 0

__block_for_cond_27:
		mov		r8, qword [rbp+40]
		and		r13, -1
		and		r8, -1
		xor		rax, rax
		cmp		r13, r8
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_27
		jmp		__block_for_after_27

__block_for_body_27:
		mov		r8, qword [rbp+40]
		mov		r15, r8
		imul	r15, 8
		add		r15, r12
		mov		r15, qword [r15+8]
		mov		r10, r13
		inc		r10
		imul	r10, 8
		add		r10, r15
		mov		r8, qword [rbp+40]
		mov		r15, r8
		dec		r15
		imul	r15, 8
		add		r15, r12
		mov		r15, qword [r15+8]
		mov		r8, r13
		mov		qword [rbp+8], r8
		imul	r8, 8
		mov		qword [rbp+8], r8
		add		r8, r15
		mov		qword [rbp+8], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+8], r8
		mov		qword [r10+8], r8

__block_for_step_26:
		inc		r13
		jmp		__block_for_cond_27

__block_for_after_27:
		mov		r13, 0

__block_for_cond_28:
		mov		r8, qword [rbp+40]
		and		r13, -1
		and		r8, -1
		xor		rax, rax
		cmp		r13, r8
		setle	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_28
		jmp		__block_for_step_27

__block_for_after_28:

__block_for_step_27:
		mov		r8, qword [rbp+40]
		inc		r8
		mov		qword [rbp+40], r8
		jmp		__block_for_cond_26

__block_for_body_28:
		mov		r8, qword [rbp+40]
		mov		r15, r8
		imul	r15, 8
		add		r15, r12
		mov		r15, qword [r15+8]
		mov		r10, r13
		imul	r10, 8
		add		r10, r15
		mov		r8, qword [rbp+40]
		mov		r15, r8
		imul	r15, 8
		add		r15, r12
		mov		r15, qword [r15+8]
		mov		r8, r13
		mov		qword [rbp+16], r8
		imul	r8, 8
		mov		qword [rbp+16], r8
		add		r8, r15
		mov		qword [rbp+16], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+16], r8
		mov		r8, qword [rbp+40]
		mov		r15, r8
		dec		r15
		mov		r8, r15
		mov		qword [rbp+24], r8
		imul	r8, 8
		mov		qword [rbp+24], r8
		add		r8, r12
		mov		qword [rbp+24], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+24], r8
		mov		r15, r13
		imul	r15, 8
		mov		r8, qword [rbp+24]
		add		r15, r8
		mov		r15, qword [r15+8]
		mov		r8, qword [rbp+40]
		imul	r15, r8
		mov		r8, qword [rbp+32]
		mov		rbx, r8
		mov		rax, r15
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r8, rdx
		mov		rdx, r8
		mov		qword [rbp], r8
		mov		r8, qword [rbp+16]
		mov		r15, r8
		mov		r8, qword [rbp]
		sub		r15, r8
		mov		r8, qword [rbp+32]
		add		r15, r8
		imul	r15, r11
		mov		r8, qword [rbp+32]
		mov		rbx, r8
		mov		rax, r15
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r15, rdx
		mov		rdx, r8
		mov		qword [r10+8], r15

__block_for_step_28:
		inc		r13
		jmp		__block_for_cond_28

# function Calculate_Comb

__block_Calculate_Comb_entry_1:
		push	r14
		push	r13
		push	r12
		push	r15
		push	rbx
		push	rbp
		sub		rsp, 40
		mov		rbp, rsp
		mov		r8, qword [__static_data_Comb_1]
		mov		qword [rbp+16], r8
		mov		r12, qword [__static_data_Mod_1]
		mov		r8, qword [__static_data_M_1]
		mov		qword [rbp+24], r8
		mov		r14, qword [__static_data_C_1]
		mov		r10, 0

__block_for_cond_29:
		mov		r8, qword [rbp+24]
		and		r10, -1
		and		r8, -1
		xor		rax, rax
		cmp		r10, r8
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_29

__block_for_after_29:
		mov		r10, 1

__block_for_cond_30:
		mov		r8, qword [rbp+24]
		and		r10, -1
		and		r8, -1
		xor		rax, rax
		cmp		r10, r8
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_30

__block_for_after_30:
		add		rsp, 40
		pop		rbp
		pop		rbx
		pop		r15
		pop		r12
		pop		r13
		pop		r14
		ret

__block_for_body_30:
		mov		r13, 1

__block_for_cond_31:
		and		r13, -1
		and		r14, -1
		xor		rax, rax
		cmp		r13, r14
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_31
		jmp		__block_for_step_29

__block_for_after_31:

__block_for_step_29:
		inc		r10
		jmp		__block_for_cond_30

__block_for_body_31:
		mov		r11, r10
		imul	r11, 8
		mov		r8, qword [rbp+16]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r8, r13
		mov		qword [rbp], r8
		imul	r8, 8
		mov		qword [rbp], r8
		add		r8, r11
		mov		qword [rbp], r8
		mov		r11, r10
		dec		r11
		imul	r11, 8
		mov		r8, qword [rbp+16]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r8, r13
		mov		qword [rbp+8], r8
		imul	r8, 8
		mov		qword [rbp+8], r8
		add		r8, r11
		mov		qword [rbp+8], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+8], r8
		mov		r11, r10
		dec		r11
		imul	r11, 8
		mov		r8, qword [rbp+16]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r15, r13
		dec		r15
		imul	r15, 8
		add		r15, r11
		mov		r15, qword [r15+8]
		mov		r8, qword [rbp+8]
		mov		r11, r8
		add		r11, r15
		mov		r8, qword [rbp]
		mov		qword [r8+8], r11
		mov		r15, r10
		imul	r15, 8
		mov		r8, qword [rbp+16]
		add		r15, r8
		mov		r15, qword [r15+8]
		mov		r11, r13
		imul	r11, 8
		add		r11, r15
		mov		r11, qword [r11+8]
		and		r11, -1
		and		r12, -1
		xor		rax, rax
		cmp		r11, r12
		setge	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_4
		jmp		__block_for_step_30

__block_if_then_4:
		mov		r11, r10
		imul	r11, 8
		mov		r8, qword [rbp+16]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r15, r13
		imul	r15, 8
		add		r15, r11
		mov		r11, r10
		imul	r11, 8
		mov		r8, qword [rbp+16]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r8, r13
		mov		qword [rbp+32], r8
		imul	r8, 8
		mov		qword [rbp+32], r8
		add		r8, r11
		mov		qword [rbp+32], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+32], r8
		mov		r11, r8
		sub		r11, r12
		mov		qword [r15+8], r11
		jmp		__block_for_step_30

__block_if_after_3:

__block_for_step_30:
		inc		r13
		jmp		__block_for_cond_31

__block_for_body_29:
		mov		r13, r10
		imul	r13, 8
		mov		r8, qword [rbp+16]
		add		r13, r8
		mov		r13, qword [r13+8]
		mov		r11, 0
		imul	r11, 8
		add		r11, r13
		mov		qword [r11+8], 1

__block_for_step_31:
		inc		r10
		jmp		__block_for_cond_29

# function Euler

__block_Euler_entry_1:
		push	r14
		push	r13
		push	r12
		push	r15
		push	rbx
		push	rbp
		sub		rsp, 56
		mov		rbp, rsp
		mov		r8, qword [__static_data_Mod_1]
		mov		qword [rbp+32], r8
		mov		r15, qword [__static_data_M_1]
		mov		r8, qword [__static_data_q_1]
		mov		qword [rbp+24], r8
		mov		r8, qword [__static_data_v_1]
		mov		qword [rbp+40], r8
		mov		r8, qword [__static_data_prime_1]
		mov		qword [rbp+8], r8
		mov		r8, qword [__static_data_ksm_1]
		mov		qword [rbp+48], r8
		mov		r8, 0
		mov		qword [rbp+16], r8
		mov		r10, rdi
		imul	r10, 8
		mov		r8, qword [rbp+24]
		add		r10, r8
		mov		r10, qword [r10+8]
		mov		r11, 1
		imul	r11, 8
		add		r11, r10
		mov		qword [r11+8], 1
		mov		r13, 0

__block_for_cond_32:
		and		r13, -1
		xor		rax, rax
		cmp		r13, 100001
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_32
		jmp		__block_for_after_32

__block_for_body_32:
		mov		r10, r13
		imul	r10, 8
		mov		r8, qword [rbp+40]
		add		r10, r8
		mov		qword [r10+8], 0

__block_for_step_32:
		inc		r13
		jmp		__block_for_cond_32

__block_for_after_32:
		mov		r13, 2

__block_for_cond_33:
		and		r13, -1
		and		r15, -1
		xor		rax, rax
		cmp		r13, r15
		setle	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_33
		jmp		__block_for_after_33

__block_for_body_33:
		mov		r10, r13
		imul	r10, 8
		mov		r8, qword [rbp+40]
		add		r10, r8
		mov		r10, qword [r10+8]
		and		r10, -1
		xor		rax, rax
		cmp		r10, 0
		sete	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_if_then_5
		jmp		__block_if_after_4

__block_if_then_5:
		mov		r8, qword [rbp+16]
		inc		r8
		mov		qword [rbp+16], r8
		mov		r10, r8
		imul	r10, 8
		mov		r8, qword [rbp+8]
		add		r10, r8
		mov		qword [r10+8], r13
		mov		r10, rdi
		imul	r10, 8
		mov		r8, qword [rbp+24]
		add		r10, r8
		mov		r10, qword [r10+8]
		mov		r12, r13
		imul	r12, 8
		add		r12, r10
		mov		r11, r13
		imul	r11, 8
		mov		r8, qword [rbp+48]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r10, rdi
		imul	r10, 8
		add		r10, r11
		mov		r10, qword [r10+8]
		mov		r8, qword [rbp+32]
		add		r10, r8
		dec		r10
		mov		r8, qword [rbp+32]
		mov		rbx, r8
		mov		rax, r10
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r10, rdx
		mov		rdx, r8
		mov		qword [r12+8], r10

__block_if_after_4:
		mov		r10, 1

__block_for_cond_34:
		mov		r8, qword [rbp+16]
		and		r10, -1
		and		r8, -1
		xor		rax, rax
		cmp		r10, r8
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_and_lhs_true_1
		jmp		__block_for_step_33

__block_and_lhs_true_1:
		mov		r11, r10
		imul	r11, 8
		mov		r8, qword [rbp+8]
		add		r11, r8
		mov		r11, qword [r11+8]
		imul	r11, r13
		and		r11, -1
		and		r15, -1
		xor		rax, rax
		cmp		r11, r15
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_34
		jmp		__block_for_step_33

__block_for_body_34:
		mov		r11, r10
		imul	r11, 8
		mov		r8, qword [rbp+8]
		add		r11, r8
		mov		r11, qword [r11+8]
		imul	r11, r13
		imul	r11, 8
		mov		r8, qword [rbp+40]
		add		r11, r8
		mov		qword [r11+8], 1
		mov		r11, r10
		imul	r11, 8
		mov		r8, qword [rbp+8]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		rbx, r11
		mov		rax, r13
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r11, rdx
		mov		rdx, r8
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_6
		jmp		__block_if_else_2

__block_if_then_6:
		mov		r14, rdi
		imul	r14, 8
		mov		r8, qword [rbp+24]
		add		r14, r8
		mov		r14, qword [r14+8]
		mov		r11, r10
		imul	r11, 8
		mov		r8, qword [rbp+8]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r12, r13
		imul	r12, r11
		mov		r11, r12
		imul	r11, 8
		add		r11, r14
		mov		r12, rdi
		imul	r12, 8
		mov		r8, qword [rbp+24]
		add		r12, r8
		mov		r12, qword [r12+8]
		mov		r14, r13
		imul	r14, 8
		add		r14, r12
		mov		r14, qword [r14+8]
		imul	r10, 8
		mov		r8, qword [rbp+8]
		add		r10, r8
		mov		r10, qword [r10+8]
		mov		r12, r10
		imul	r12, 8
		mov		r8, qword [rbp+48]
		add		r12, r8
		mov		r12, qword [r12+8]
		mov		r10, rdi
		imul	r10, 8
		add		r10, r12
		mov		r10, qword [r10+8]
		mov		r12, r14
		imul	r12, r10
		mov		r8, qword [rbp+32]
		mov		rbx, r8
		mov		rax, r12
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r10, rdx
		mov		rdx, r8
		mov		qword [r11+8], r10
		jmp		__block_for_step_33

__block_if_else_2:
		mov		r14, rdi
		imul	r14, 8
		mov		r8, qword [rbp+24]
		add		r14, r8
		mov		r14, qword [r14+8]
		mov		r11, r10
		imul	r11, 8
		mov		r8, qword [rbp+8]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r12, r13
		imul	r12, r11
		imul	r12, 8
		add		r12, r14
		mov		r11, rdi
		imul	r11, 8
		mov		r8, qword [rbp+24]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r8, r13
		mov		qword [rbp], r8
		imul	r8, 8
		mov		qword [rbp], r8
		add		r8, r11
		mov		qword [rbp], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp], r8
		mov		r14, rdi
		imul	r14, 8
		mov		r8, qword [rbp+24]
		add		r14, r8
		mov		r14, qword [r14+8]
		mov		r11, r10
		imul	r11, 8
		mov		r8, qword [rbp+8]
		add		r11, r8
		mov		r11, qword [r11+8]
		imul	r11, 8
		add		r11, r14
		mov		r11, qword [r11+8]
		mov		r8, qword [rbp]
		mov		r14, r8
		imul	r14, r11
		mov		r8, qword [rbp+32]
		mov		rbx, r8
		mov		rax, r14
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r11, rdx
		mov		rdx, r8
		mov		qword [r12+8], r11
		jmp		__block_for_step_34

__block_if_after_5:

__block_for_step_34:
		inc		r10
		jmp		__block_for_cond_34

__block_for_after_34:

__block_for_step_33:
		inc		r13
		jmp		__block_for_cond_33

__block_for_after_33:
		mov		r8, qword [rbp+16]
		mov		qword [__static_data_tot_1], r8
		add		rsp, 56
		pop		rbp
		pop		rbx
		pop		r15
		pop		r12
		pop		r13
		pop		r14
		ret

# function main

main:
		push	r14
		push	r13
		push	r12
		push	r15
		push	rbx
		push	rbp
		sub		rsp, 248
		mov		rbp, rsp
		mov		r8, qword [__static_data_N_1]
		mov		qword [rbp+216], r8
		mov		r8, qword [__static_data_M_1]
		mov		qword [rbp+64], r8
		mov		r8, qword [__static_data_C_1]
		mov		qword [rbp+40], r8
		call	__block___init_func_entry_1
		push	r11
		push	r8
		push	r10
		push	r9
		call	_Z6getIntv
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		r8, r10
		mov		qword [rbp+184], r8
		mov		r8, qword [rbp+216]
		mov		qword [__static_data_N_1], r8
		mov		r8, qword [rbp+64]
		mov		qword [__static_data_M_1], r8
		mov		r8, qword [rbp+40]
		mov		qword [__static_data_C_1], r8
		push	r11
		push	r8
		push	r10
		push	r9
		call	__block_init_entry_1
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		r8, qword [__static_data_Sum_1]
		mov		qword [rbp], r8
		mov		r8, qword [__static_data_b_1]
		mov		qword [rbp+80], r8
		mov		r8, qword [__static_data_res_1]
		mov		qword [rbp+208], r8
		mov		r8, qword [__static_data_fc_1]
		mov		qword [rbp+48], r8
		mov		r8, qword [__static_data_fn_1]
		mov		qword [rbp+176], r8
		mov		r8, qword [__static_data_m_1]
		mov		qword [rbp+88], r8
		mov		r8, qword [__static_data_fm_1]
		mov		qword [rbp+24], r8
		mov		r8, qword [__static_data_Comb_1]
		mov		qword [rbp+192], r8
		mov		r10, 1
		imul	r10, 8
		mov		r8, qword [rbp+176]
		add		r10, r8
		mov		qword [r10+8], 2
		mov		r10, 1
		imul	r10, 8
		mov		r8, qword [rbp+48]
		add		r10, r8
		mov		qword [r10+8], 3
		mov		r10, 1
		imul	r10, 8
		mov		r8, qword [rbp+24]
		add		r10, r8
		mov		r10, qword [r10+8]
		mov		r11, 1
		imul	r11, 8
		add		r11, r10
		mov		qword [r11+8], 3
		mov		r11, 1
		imul	r11, 8
		mov		r8, qword [rbp+24]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r10, 2
		imul	r10, 8
		add		r10, r11
		mov		qword [r10+8], 4
		mov		r10, 2
		imul	r10, 8
		mov		r8, qword [rbp+176]
		add		r10, r8
		mov		qword [r10+8], 3
		mov		r10, 2
		imul	r10, 8
		mov		r8, qword [rbp+48]
		add		r10, r8
		mov		qword [r10+8], 3
		mov		r11, 2
		imul	r11, 8
		mov		r8, qword [rbp+24]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r10, 1
		imul	r10, 8
		add		r10, r11
		mov		qword [r10+8], 3
		mov		r10, 2
		imul	r10, 8
		mov		r8, qword [rbp+24]
		add		r10, r8
		mov		r10, qword [r10+8]
		mov		r11, 2
		imul	r11, 8
		add		r11, r10
		mov		qword [r11+8], 4
		mov		r10, 2
		imul	r10, 8
		mov		r8, qword [rbp+24]
		add		r10, r8
		mov		r10, qword [r10+8]
		mov		r11, 3
		imul	r11, 8
		add		r11, r10
		mov		qword [r11+8], 4
		mov		r10, 3
		imul	r10, 8
		mov		r8, qword [rbp+176]
		add		r10, r8
		mov		qword [r10+8], 4
		mov		r10, 3
		imul	r10, 8
		mov		r8, qword [rbp+48]
		add		r10, r8
		mov		qword [r10+8], 4
		mov		r11, 3
		imul	r11, 8
		mov		r8, qword [rbp+24]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r10, 1
		imul	r10, 8
		add		r10, r11
		mov		qword [r10+8], 5
		mov		r11, 3
		imul	r11, 8
		mov		r8, qword [rbp+24]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r10, 2
		imul	r10, 8
		add		r10, r11
		mov		qword [r10+8], 7
		mov		r10, 3
		imul	r10, 8
		mov		r8, qword [rbp+24]
		add		r10, r8
		mov		r10, qword [r10+8]
		mov		r11, 3
		imul	r11, 8
		add		r11, r10
		mov		qword [r11+8], 8
		mov		r11, 3
		imul	r11, 8
		mov		r8, qword [rbp+24]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r10, 4
		imul	r10, 8
		add		r10, r11
		mov		qword [r10+8], 9
		mov		r8, 4
		mov		qword [rbp+40], r8
		mov		r8, 9
		mov		qword [rbp+64], r8
		mov		r8, 4
		mov		qword [rbp+216], r8
		mov		r13, 10007
		mov		qword [__static_data_Mod_1], r13
		mov		r8, qword [rbp+216]
		mov		qword [__static_data_N_1], r8
		mov		r8, qword [rbp+64]
		mov		qword [__static_data_M_1], r8
		mov		r8, qword [rbp+40]
		mov		qword [__static_data_C_1], r8
		push	r11
		push	r8
		push	r10
		push	r9
		call	__block_Calculate_G_entry_1
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		qword [__static_data_Mod_1], r13
		mov		r8, qword [rbp+64]
		mov		qword [__static_data_M_1], r8
		mov		r8, qword [rbp+40]
		mov		qword [__static_data_C_1], r8
		push	r11
		push	r8
		push	r10
		push	0
		call	__block_Calculate_Comb_entry_1
		add		rsp, 8
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		r11, 1

__block_for_cond_35:
		mov		r8, qword [rbp+184]
		and		r11, -1
		and		r8, -1
		xor		rax, rax
		cmp		r11, r8
		setle	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_35

__block_for_after_35:
		mov		qword [__static_data_Mod_1], r13
		mov		r8, qword [rbp+216]
		mov		qword [__static_data_N_1], r8
		mov		r8, qword [rbp+64]
		mov		qword [__static_data_M_1], r8
		mov		r8, qword [rbp+40]
		mov		qword [__static_data_C_1], r8
		mov		rax, 0
		add		rsp, 248
		pop		rbp
		pop		rbx
		pop		r15
		pop		r12
		pop		r13
		pop		r14
		ret

__block_for_body_35:
		mov		r10, r11
		imul	r10, 8
		mov		r8, qword [rbp+176]
		add		r10, r8
		mov		r10, qword [r10+8]
		mov		r8, r10
		mov		qword [rbp+96], r8
		mov		r10, r11
		imul	r10, 8
		mov		r8, qword [rbp+48]
		add		r10, r8
		mov		r10, qword [r10+8]
		mov		r15, 1

__block_for_cond_36:
		mov		r8, qword [rbp+96]
		and		r15, -1
		and		r8, -1
		xor		rax, rax
		cmp		r15, r8
		setle	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_for_body_36

__block_for_after_36:
		mov		r8, qword [rbp+96]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 1
		sete	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_if_then_7
		jmp		__block_if_else_3

__block_if_then_7:
		mov		r12, 1
		imul	r12, 8
		mov		r8, qword [rbp+88]
		add		r12, r8
		mov		r12, qword [r12+8]
		imul	r12, 8
		mov		r8, qword [rbp+192]
		add		r12, r8
		mov		r12, qword [r12+8]
		imul	r10, 8
		add		r10, r12
		mov		r10, qword [r10+8]
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rdi, r10
		call	_Z10printlnInti
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		jmp		__block_for_step_35

__block_if_else_3:
		mov		r8, 0
		mov		qword [rbp+56], r8
		mov		r8, 0
		mov		qword [rbp+16], r8
		mov		r8, 1
		mov		qword [rbp+8], r8

__block_for_cond_37:
		mov		r12, 1
		imul	r12, 8
		mov		r8, qword [rbp+88]
		add		r12, r8
		mov		r12, qword [r12+8]
		mov		r8, qword [rbp+8]
		and		r8, -1
		and		r12, -1
		xor		rax, rax
		cmp		r8, r12
		setle	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_for_body_37

__block_for_after_37:
		mov		r8, qword [rbp+56]
		and		r8, -1
		xor		rax, rax
		cmp		r8, 0
		setl	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_if_then_8
		jmp		__block_if_after_6

__block_if_then_8:
		mov		r8, qword [rbp+56]
		mov		r10, r8
		add		r10, r13
		mov		r8, r10
		mov		qword [rbp+56], r8

__block_if_after_6:
		push	r11
		push	r8
		push	r10
		push	r9
		mov		rax, qword [rbp+56]
		mov		rdi, rax
		call	_Z10printlnInti
		pop		r9
		pop		r10
		pop		r8
		pop		r11
		jmp		__block_for_step_35

__block_if_after_7:

__block_for_step_35:
		inc		r11
		jmp		__block_for_cond_35

__block_for_body_37:
		mov		r14, 1
		imul	r14, 8
		mov		r8, qword [rbp+88]
		add		r14, r8
		mov		r14, qword [r14+8]
		mov		r12, 1
		imul	r12, 8
		mov		r8, qword [rbp+88]
		add		r12, r8
		mov		r12, qword [r12+8]
		mov		r8, qword [rbp+8]
		mov		rbx, r8
		mov		rax, r12
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r12, rax
		mov		rdx, r8
		mov		rbx, r12
		mov		rax, r14
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r12, rax
		mov		rdx, r8
		mov		r14, r12
		mov		r15, 2

__block_for_cond_38:
		mov		r8, qword [rbp+96]
		and		r15, -1
		and		r8, -1
		xor		rax, rax
		cmp		r15, r8
		setle	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_for_body_38
		jmp		__block_for_after_38

__block_for_body_38:
		mov		r12, r15
		imul	r12, 8
		mov		r8, qword [rbp+88]
		add		r12, r8
		mov		r12, qword [r12+8]
		mov		r8, r15
		mov		qword [rbp+136], r8
		imul	r8, 8
		mov		qword [rbp+136], r8
		mov		r9, qword [rbp+88]
		add		r8, r9
		mov		qword [rbp+136], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+136], r8
		mov		r9, qword [rbp+8]
		mov		rbx, r9
		mov		rax, r8
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r8, rax
		mov		rdx, r8
		mov		qword [rbp+160], r8
		mov		rbx, r8
		mov		rax, r12
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r12, rax
		mov		rdx, r8
		mov		r8, r12
		mov		qword [rbp+232], r8
		and		r8, -1
		and		r14, -1
		xor		rax, rax
		cmp		r8, r14
		setl	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_if_then_9
		jmp		__block_for_step_36

__block_if_then_9:
		mov		r8, qword [rbp+232]
		mov		r14, r8
		jmp		__block_for_step_36

__block_if_after_8:

__block_for_step_36:
		inc		r15
		jmp		__block_for_cond_38

__block_for_after_38:
		mov		r12, 1
		imul	r12, 8
		mov		r8, qword [rbp+88]
		add		r12, r8
		mov		r12, qword [r12+8]
		and		r12, -1
		and		r14, -1
		xor		rax, rax
		cmp		r12, r14
		setl	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_if_then_10
		jmp		__block_if_after_9

__block_if_then_10:
		mov		r14, 1
		imul	r14, 8
		mov		r8, qword [rbp+88]
		add		r14, r8
		mov		r14, qword [r14+8]

__block_if_after_9:
		mov		r8, r14
		mov		qword [rbp+8], r8
		mov		r12, 0
		imul	r12, 8
		mov		r8, qword [rbp+80]
		add		r12, r8
		mov		qword [r12+8], 1
		mov		r15, 1

__block_for_cond_39:
		mov		r8, qword [rbp+96]
		and		r15, -1
		and		r8, -1
		xor		rax, rax
		cmp		r15, r8
		setle	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_for_body_39
		jmp		__block_for_after_39

__block_for_body_39:
		mov		r12, r15
		imul	r12, 8
		mov		r8, qword [rbp+88]
		add		r12, r8
		mov		r12, qword [r12+8]
		mov		r8, qword [rbp+8]
		mov		rbx, r8
		mov		rax, r12
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r12, rax
		mov		rdx, r8
		mov		rbx, r13
		mov		rax, r12
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r12, rdx
		mov		rdx, r8
		mov		r14, r12
		inc		r12
		mov		r8, r14
		mov		qword [rbp+152], r8
		imul	r8, r12
		mov		qword [rbp+152], r8
		mov		rbx, 2
		mov		rax, r8
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r12, rax
		mov		rdx, r8
		mov		rbx, r13
		mov		rax, r12
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r12, rdx
		mov		rdx, r8
		mov		r8, r12
		mov		qword [rbp+112], r8
		mov		r12, r15
		imul	r12, 8
		mov		r8, qword [rbp+88]
		add		r12, r8
		mov		r12, qword [r12+8]
		imul	r12, r14
		mov		rbx, r13
		mov		rax, r12
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r12, rdx
		mov		rdx, r8
		mov		r8, r12
		mov		qword [rbp+72], r8
		mov		r8, 0
		mov		qword [rbp+104], r8

__block_for_cond_40:
		mov		r8, qword [rbp+104]
		and		r8, -1
		and		r15, -1
		xor		rax, rax
		cmp		r8, r15
		setl	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_for_body_40
		jmp		__block_for_after_40

__block_for_body_40:
		mov		r8, qword [rbp+104]
		mov		r12, r8
		inc		r12
		mov		r8, r12
		mov		qword [rbp+200], r8
		imul	r8, 8
		mov		qword [rbp+200], r8
		mov		r9, qword [rbp+208]
		add		r8, r9
		mov		qword [rbp+200], r8
		mov		r8, qword [rbp+104]
		mov		r12, r8
		imul	r12, 8
		mov		r8, qword [rbp+80]
		add		r12, r8
		mov		r12, qword [r12+8]
		mov		r14, r13
		mov		r8, qword [rbp+112]
		sub		r14, r8
		imul	r12, r14
		mov		rbx, r13
		mov		rax, r12
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r12, rdx
		mov		rdx, r8
		mov		r8, qword [rbp+200]
		mov		qword [r8+8], r12

__block_for_step_37:
		mov		r8, qword [rbp+104]
		inc		r8
		mov		qword [rbp+104], r8
		jmp		__block_for_cond_40

__block_for_after_40:
		mov		r12, 0
		imul	r12, 8
		mov		r8, qword [rbp+208]
		add		r12, r8
		mov		qword [r12+8], 0
		mov		r8, 0
		mov		qword [rbp+104], r8

__block_for_cond_41:
		mov		r8, qword [rbp+104]
		and		r8, -1
		and		r15, -1
		xor		rax, rax
		cmp		r8, r15
		setl	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_for_body_41
		jmp		__block_for_after_41

__block_for_body_41:
		mov		r8, qword [rbp+104]
		mov		qword [rbp+32], r8
		imul	r8, 8
		mov		qword [rbp+32], r8
		mov		r9, qword [rbp+208]
		add		r8, r9
		mov		qword [rbp+32], r8
		mov		r8, qword [rbp+104]
		mov		r14, r8
		imul	r14, 8
		mov		r8, qword [rbp+208]
		add		r14, r8
		mov		r14, qword [r14+8]
		mov		r8, qword [rbp+104]
		mov		qword [rbp+144], r8
		imul	r8, 8
		mov		qword [rbp+144], r8
		mov		r9, qword [rbp+80]
		add		r8, r9
		mov		qword [rbp+144], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+144], r8
		mov		r8, qword [rbp+72]
		mov		r12, r8
		mov		r8, qword [rbp+144]
		imul	r12, r8
		add		r14, r12
		mov		rbx, r13
		mov		rax, r14
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r12, rdx
		mov		rdx, r8
		mov		r8, qword [rbp+32]
		mov		qword [r8+8], r12

__block_for_step_38:
		mov		r8, qword [rbp+104]
		inc		r8
		mov		qword [rbp+104], r8
		jmp		__block_for_cond_41

__block_for_after_41:
		mov		r8, 0
		mov		qword [rbp+104], r8

__block_for_cond_42:
		mov		r8, qword [rbp+104]
		and		r8, -1
		and		r15, -1
		xor		rax, rax
		cmp		r8, r15
		setle	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_for_body_42
		jmp		__block_for_step_39

__block_for_body_42:
		mov		r8, qword [rbp+104]
		mov		r14, r8
		imul	r14, 8
		mov		r8, qword [rbp+80]
		add		r14, r8
		mov		r8, qword [rbp+104]
		mov		r12, r8
		imul	r12, 8
		mov		r8, qword [rbp+208]
		add		r12, r8
		mov		r12, qword [r12+8]
		mov		qword [r14+8], r12

__block_for_step_40:
		mov		r8, qword [rbp+104]
		inc		r8
		mov		qword [rbp+104], r8
		jmp		__block_for_cond_42

__block_for_after_42:

__block_for_step_39:
		inc		r15
		jmp		__block_for_cond_39

__block_for_after_39:
		mov		r15, 0

__block_for_cond_43:
		mov		r8, qword [rbp+96]
		and		r15, -1
		and		r8, -1
		xor		rax, rax
		cmp		r15, r8
		setle	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_for_body_43

__block_for_after_43:
		mov		r8, qword [rbp+8]
		mov		qword [rbp+16], r8

__block_for_step_41:
		mov		r8, qword [rbp+8]
		inc		r8
		mov		qword [rbp+8], r8
		jmp		__block_for_cond_37

__block_for_body_43:
		mov		r8, r15
		mov		qword [rbp+120], r8
		imul	r8, 8
		mov		qword [rbp+120], r8
		mov		r9, qword [rbp+80]
		add		r8, r9
		mov		qword [rbp+120], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+120], r8
		mov		r12, r15
		imul	r12, 8
		mov		r8, qword [rbp]
		add		r12, r8
		mov		r12, qword [r12+8]
		mov		r8, qword [rbp+8]
		mov		r14, r8
		imul	r14, 8
		add		r14, r12
		mov		r14, qword [r14+8]
		mov		r8, r10
		mov		qword [rbp+168], r8
		imul	r8, 8
		mov		qword [rbp+168], r8
		add		r8, r14
		mov		qword [rbp+168], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+168], r8
		mov		r12, r15
		imul	r12, 8
		mov		r8, qword [rbp]
		add		r12, r8
		mov		r12, qword [r12+8]
		mov		r8, qword [rbp+16]
		mov		r14, r8
		imul	r14, 8
		add		r14, r12
		mov		r14, qword [r14+8]
		mov		r12, r10
		imul	r12, 8
		add		r12, r14
		mov		r12, qword [r12+8]
		mov		r8, qword [rbp+168]
		mov		qword [rbp+224], r8
		sub		r8, r12
		mov		qword [rbp+224], r8
		mov		r8, qword [rbp+120]
		mov		r14, r8
		mov		r8, qword [rbp+224]
		imul	r14, r8
		mov		r8, qword [rbp+56]
		mov		r12, r8
		add		r12, r14
		mov		rbx, r13
		mov		rax, r12
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r12, rdx
		mov		rdx, r8
		mov		r8, r12
		mov		qword [rbp+56], r8

__block_for_step_42:
		inc		r15
		jmp		__block_for_cond_43

__block_for_body_36:
		mov		r8, r15
		mov		qword [rbp+128], r8
		imul	r8, 8
		mov		qword [rbp+128], r8
		mov		r9, qword [rbp+88]
		add		r8, r9
		mov		qword [rbp+128], r8
		mov		r14, r11
		imul	r14, 8
		mov		r8, qword [rbp+24]
		add		r14, r8
		mov		r14, qword [r14+8]
		mov		r12, r15
		imul	r12, 8
		add		r12, r14
		mov		r12, qword [r12+8]
		mov		r8, qword [rbp+128]
		mov		qword [r8+8], r12

__block_for_step_43:
		inc		r15
		jmp		__block_for_cond_36

# function Calculate_q

__block_Calculate_q_entry_1:
		push	r12
		push	rbx
		push	rbp
		mov		rbp, rsp
		mov		r12, qword [__static_data_C_1]
		mov		r11, 0

__block_for_cond_44:
		mov		r10, r12
		sub		r10, 2
		and		r11, -1
		and		r10, -1
		xor		rax, rax
		cmp		r11, r10
		setle	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_44

__block_for_after_44:
		pop		rbp
		pop		rbx
		pop		r12
		ret

__block_for_body_44:
		push	r11
		push	r10
		mov		rdi, r11
		call	__block_Euler_entry_1
		pop		r10
		pop		r11
		mov		r10, rax

__block_for_step_44:
		inc		r11
		jmp		__block_for_cond_44

# function Calculate_G

__block_Calculate_G_entry_1:
		push	r14
		push	r13
		push	r12
		push	r15
		push	rbx
		push	rbp
		sub		rsp, 120
		mov		rbp, rsp
		mov		r14, qword [__static_data_Mod_1]
		mov		r8, qword [__static_data_N_1]
		mov		qword [rbp+16], r8
		mov		r12, qword [__static_data_M_1]
		mov		r8, qword [__static_data_q_1]
		mov		qword [rbp+48], r8
		mov		r8, qword [__static_data_C_1]
		mov		qword [rbp+88], r8
		mov		r8, qword [__static_data_Sum_1]
		mov		qword [rbp+72], r8
		mov		r8, qword [__static_data_g_1]
		mov		qword [rbp+40], r8
		mov		r8, qword [__static_data_p_1]
		mov		qword [rbp+24], r8
		push	r11
		push	r8
		push	r10
		push	0
		call	__block_Calculate_Ksm_entry_1
		add		rsp, 8
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		push	r11
		push	r8
		push	r10
		push	0
		call	__block_Calculate_p_entry_1
		add		rsp, 8
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		push	r11
		push	r8
		push	r10
		push	0
		call	__block_Calculate_q_entry_1
		add		rsp, 8
		pop		r10
		pop		r8
		pop		r11
		mov		r10, rax
		mov		r10, 1

__block_for_cond_45:
		and		r10, -1
		and		r12, -1
		xor		rax, rax
		cmp		r10, r12
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_45

__block_for_after_45:
		mov		r8, 0
		mov		qword [rbp], r8

__block_for_cond_46:
		mov		r8, qword [rbp]
		mov		r9, qword [rbp+16]
		and		r8, -1
		and		r9, -1
		xor		rax, rax
		cmp		r8, r9
		setle	al
		mov		r10, rax
		cmp		r10, 1
		je		__block_for_body_46

__block_for_after_46:
		add		rsp, 120
		pop		rbp
		pop		rbx
		pop		r15
		pop		r12
		pop		r13
		pop		r14
		ret

__block_for_body_46:
		mov		r10, 2

__block_for_cond_47:
		mov		r8, qword [rbp+88]
		and		r10, -1
		and		r8, -1
		xor		rax, rax
		cmp		r10, r8
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_47
		jmp		__block_for_step_45

__block_for_after_47:

__block_for_step_45:
		mov		r8, qword [rbp]
		inc		r8
		mov		qword [rbp], r8
		jmp		__block_for_cond_46

__block_for_body_47:
		mov		r13, 1

__block_for_cond_48:
		and		r13, -1
		and		r12, -1
		xor		rax, rax
		cmp		r13, r12
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_48
		jmp		__block_for_step_46

__block_for_body_48:
		mov		r8, qword [rbp]
		mov		r11, r8
		imul	r11, 8
		mov		r8, qword [rbp+72]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r15, r13
		imul	r15, 8
		add		r15, r11
		mov		r15, qword [r15+8]
		mov		r8, r10
		mov		qword [rbp+80], r8
		imul	r8, 8
		mov		qword [rbp+80], r8
		add		r8, r15
		mov		qword [rbp+80], r8
		mov		r8, qword [rbp]
		mov		r15, r8
		imul	r15, 8
		mov		r8, qword [rbp+72]
		add		r15, r8
		mov		r15, qword [r15+8]
		mov		r11, r13
		dec		r11
		imul	r11, 8
		add		r11, r15
		mov		r11, qword [r11+8]
		mov		r8, r10
		mov		qword [rbp+64], r8
		imul	r8, 8
		mov		qword [rbp+64], r8
		add		r8, r11
		mov		qword [rbp+64], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+64], r8
		mov		r8, qword [rbp]
		mov		r11, r8
		imul	r11, 8
		mov		r8, qword [rbp+40]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r15, r13
		imul	r15, 8
		add		r15, r11
		mov		r15, qword [r15+8]
		mov		r11, r10
		imul	r11, 8
		add		r11, r15
		mov		r11, qword [r11+8]
		mov		r8, qword [rbp+64]
		mov		r15, r8
		add		r15, r11
		mov		r8, qword [rbp+80]
		mov		qword [r8+8], r15
		mov		r8, qword [rbp]
		mov		r11, r8
		imul	r11, 8
		mov		r8, qword [rbp+72]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r15, r13
		imul	r15, 8
		add		r15, r11
		mov		r15, qword [r15+8]
		mov		r11, r10
		imul	r11, 8
		add		r11, r15
		mov		r11, qword [r11+8]
		and		r11, -1
		and		r14, -1
		xor		rax, rax
		cmp		r11, r14
		setge	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_11
		jmp		__block_for_step_47

__block_if_then_11:
		mov		r8, qword [rbp]
		mov		r15, r8
		imul	r15, 8
		mov		r8, qword [rbp+72]
		add		r15, r8
		mov		r15, qword [r15+8]
		mov		r11, r13
		imul	r11, 8
		add		r11, r15
		mov		r11, qword [r11+8]
		mov		r8, r10
		mov		qword [rbp+96], r8
		imul	r8, 8
		mov		qword [rbp+96], r8
		add		r8, r11
		mov		qword [rbp+96], r8
		mov		r8, qword [rbp]
		mov		r15, r8
		imul	r15, 8
		mov		r8, qword [rbp+72]
		add		r15, r8
		mov		r15, qword [r15+8]
		mov		r11, r13
		imul	r11, 8
		add		r11, r15
		mov		r11, qword [r11+8]
		mov		r15, r10
		imul	r15, 8
		add		r15, r11
		mov		r15, qword [r15+8]
		mov		r11, r15
		sub		r11, r14
		mov		r8, qword [rbp+96]
		mov		qword [r8+8], r11
		jmp		__block_for_step_47

__block_if_after_10:

__block_for_step_47:
		inc		r13
		jmp		__block_for_cond_48

__block_for_after_48:

__block_for_step_46:
		inc		r10
		jmp		__block_for_cond_47

__block_for_body_45:
		mov		r13, 2

__block_for_cond_49:
		mov		r8, qword [rbp+88]
		and		r13, -1
		and		r8, -1
		xor		rax, rax
		cmp		r13, r8
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_49
		jmp		__block_for_step_48

__block_for_body_49:
		mov		r8, 0
		mov		qword [rbp], r8

__block_for_cond_50:
		mov		r11, r13
		sub		r11, 2
		mov		r8, qword [rbp]
		and		r8, -1
		and		r11, -1
		xor		rax, rax
		cmp		r8, r11
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_50
		jmp		__block_for_after_49

__block_for_body_50:
		mov		r11, 0
		imul	r11, 8
		mov		r8, qword [rbp+40]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r15, r10
		imul	r15, 8
		add		r15, r11
		mov		r15, qword [r15+8]
		mov		r8, r13
		mov		qword [rbp+56], r8
		imul	r8, 8
		mov		qword [rbp+56], r8
		add		r8, r15
		mov		qword [rbp+56], r8
		mov		r11, 0
		imul	r11, 8
		mov		r8, qword [rbp+40]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r15, r10
		imul	r15, 8
		add		r15, r11
		mov		r15, qword [r15+8]
		mov		r8, r13
		mov		qword [rbp+104], r8
		imul	r8, 8
		mov		qword [rbp+104], r8
		add		r8, r15
		mov		qword [rbp+104], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+104], r8
		mov		r11, r13
		sub		r11, 2
		imul	r11, 8
		mov		r8, qword [rbp+24]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r8, qword [rbp]
		mov		r15, r8
		imul	r15, 8
		add		r15, r11
		mov		r15, qword [r15+8]
		mov		r8, qword [rbp]
		mov		qword [rbp+32], r8
		imul	r8, 8
		mov		qword [rbp+32], r8
		mov		r9, qword [rbp+48]
		add		r8, r9
		mov		qword [rbp+32], r8
		mov		r8, qword [r8+8]
		mov		qword [rbp+32], r8
		mov		r11, r10
		imul	r11, 8
		mov		r8, qword [rbp+32]
		add		r11, r8
		mov		r11, qword [r11+8]
		imul	r15, r11
		mov		r8, qword [rbp+104]
		mov		r11, r8
		add		r11, r15
		mov		rbx, r14
		mov		rax, r11
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r11, rdx
		mov		rdx, r8
		mov		r8, qword [rbp+56]
		mov		qword [r8+8], r11

__block_for_step_49:
		mov		r8, qword [rbp]
		inc		r8
		mov		qword [rbp], r8
		jmp		__block_for_cond_50

__block_for_after_49:
		mov		r8, 1
		mov		qword [rbp], r8

__block_for_cond_51:
		mov		r8, qword [rbp]
		mov		r9, qword [rbp+16]
		and		r8, -1
		and		r9, -1
		xor		rax, rax
		cmp		r8, r9
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_51
		jmp		__block_for_step_50

__block_for_body_51:
		mov		r8, qword [rbp]
		mov		r11, r8
		imul	r11, 8
		mov		r8, qword [rbp+40]
		add		r11, r8
		mov		r11, qword [r11+8]
		mov		r15, r10
		imul	r15, 8
		add		r15, r11
		mov		r15, qword [r15+8]
		mov		r8, r13
		mov		qword [rbp+8], r8
		imul	r8, 8
		mov		qword [rbp+8], r8
		add		r8, r15
		mov		qword [rbp+8], r8
		mov		r8, qword [rbp]
		mov		r11, r8
		dec		r11
		mov		r15, r11
		imul	r15, 8
		mov		r8, qword [rbp+40]
		add		r15, r8
		mov		r15, qword [r15+8]
		mov		r11, r10
		imul	r11, 8
		add		r11, r15
		mov		r11, qword [r11+8]
		mov		r15, r13
		imul	r15, 8
		add		r15, r11
		mov		r15, qword [r15+8]
		imul	r15, r10
		mov		rbx, r14
		mov		rax, r15
		mov		r8, rdx
		cdq
		idiv	rbx
		mov		r11, rdx
		mov		rdx, r8
		mov		r8, qword [rbp+8]
		mov		qword [r8+8], r11

__block_for_step_51:
		mov		r8, qword [rbp]
		inc		r8
		mov		qword [rbp], r8
		jmp		__block_for_cond_51

__block_for_after_50:

__block_for_step_50:
		inc		r13
		jmp		__block_for_cond_49

__block_for_after_51:

__block_for_step_48:
		inc		r10
		jmp		__block_for_cond_45

# function __init_func

__block___init_func_entry_1:
		push	rbx
		push	rbp
		sub		rsp, 8
		mov		rbp, rsp
		add		rsp, 8
		pop		rbp
		pop		rbx
		ret


# built-in functions

default rel

global __builtin_string_concat
global __builtin_string_equal
global __builtin_string_inequal
global __builtin_string_less
global __builtin_string_less_equal
global _Z5printPc
global _Z7printlnPc
global _Z8printInti
global _Z10printlnInti
global _Z9getStringv
global _Z6getIntv
global _Z8toStringi
global _Z27__member___string_substringPcii
global _Z26__member___string_parseIntPc
global _Z21__member___string_ordPci

extern getchar
extern strlen
extern scanf
extern __stack_chk_fail
extern putchar
extern puts
extern printf
extern strcmp
extern malloc


SECTION .text   

__builtin_string_concat:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword [rbp-28H], rdi
        mov     qword [rbp-30H], rsi
        mov     rax, qword [rbp-28H]
        mov     rax, qword [rax]
        mov     dword [rbp-10H], eax
        mov     rax, qword [rbp-30H]
        mov     rax, qword [rax]
        mov     dword [rbp-0CH], eax
        mov     eax, dword [rbp-10H]
        lea     edx, [rax+9H]
        mov     eax, dword [rbp-0CH]
        add     eax, edx
        cdqe
        mov     rdi, rax
        call    malloc
        mov     qword [rbp-8H], rax
        mov     edx, dword [rbp-10H]
        mov     eax, dword [rbp-0CH]
        add     eax, edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        mov     qword [rax], rdx
        add     qword [rbp-28H], 8
        add     qword [rbp-30H], 8
        add     qword [rbp-8H], 8
        mov     dword [rbp-1CH], -1
        mov     dword [rbp-18H], 0
L_001:  mov     eax, dword [rbp-18H]
        cmp     eax, dword [rbp-10H]
        jge     L_002
        add     dword [rbp-1CH], 1
        mov     eax, dword [rbp-1CH]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rdx, rax
        mov     eax, dword [rbp-18H]
        movsxd  rcx, eax
        mov     rax, qword [rbp-28H]
        add     rax, rcx
        movzx   eax, byte [rax]
        mov     byte [rdx], al
        add     dword [rbp-18H], 1
        jmp     L_001

L_002:  mov     dword [rbp-14H], 0
L_003:  mov     eax, dword [rbp-14H]
        cmp     eax, dword [rbp-0CH]
        jge     L_004
        add     dword [rbp-1CH], 1
        mov     eax, dword [rbp-1CH]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rdx, rax
        mov     eax, dword [rbp-14H]
        movsxd  rcx, eax
        mov     rax, qword [rbp-30H]
        add     rax, rcx
        movzx   eax, byte [rax]
        mov     byte [rdx], al
        add     dword [rbp-14H], 1
        jmp     L_003

L_004:  mov     eax, dword [rbp-1CH]
        cdqe
        lea     rdx, [rax+1H]
        mov     rax, qword [rbp-8H]
        add     rax, rdx
        mov     byte [rax], 0
        mov     rax, qword [rbp-8H]
        sub     rax, 8
        leave
        ret


__builtin_string_equal:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        test    eax, eax
        sete    al
        movzx   eax, al
        leave
        ret


__builtin_string_inequal:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        test    eax, eax
        setne   al
        movzx   eax, al
        leave
        ret


__builtin_string_less:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        shr     eax, 31
        movzx   eax, al
        leave
        ret


__builtin_string_less_equal:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        test    eax, eax
        setle   al
        movzx   eax, al
        leave
        ret


_Z5printPc:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rax
        mov     edi, L_043
        mov     eax, 0
        call    printf
        nop
        leave
        ret


_Z7printlnPc:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rdi, rax
        call    puts
        nop
        leave
        ret


_Z8printInti:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     dword [rbp-44H], edi


        mov     rax, qword [fs:abs 28H]
        mov     qword [rbp-8H], rax
        xor     eax, eax
        cmp     dword [rbp-44H], 0
        jnz     L_005
        mov     edi, 48
        call    putchar
L_005:  cmp     dword [rbp-44H], 0
        jns     L_006
        neg     dword [rbp-44H]
        mov     edi, 45
        call    putchar
L_006:  mov     dword [rbp-38H], 0
L_007:  cmp     dword [rbp-44H], 0
        jle     L_008
        mov     esi, dword [rbp-38H]
        lea     eax, [rsi+1H]
        mov     dword [rbp-38H], eax
        mov     ecx, dword [rbp-44H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        shl     eax, 2
        add     eax, edx
        add     eax, eax
        sub     ecx, eax
        mov     edx, ecx
        movsxd  rax, esi
        mov     dword [rbp+rax*4-30H], edx
        mov     ecx, dword [rbp-44H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        mov     dword [rbp-44H], eax
        jmp     L_007

L_008:  mov     eax, dword [rbp-38H]
        sub     eax, 1
        mov     dword [rbp-34H], eax
L_009:  cmp     dword [rbp-34H], 0
        js      L_010
        mov     eax, dword [rbp-34H]
        cdqe
        mov     eax, dword [rbp+rax*4-30H]
        add     eax, 48
        mov     edi, eax
        call    putchar
        sub     dword [rbp-34H], 1
        jmp     L_009

L_010:  nop
        mov     rax, qword [rbp-8H]


        xor     rax, qword [fs:abs 28H]
        jz      L_011
        call    __stack_chk_fail
L_011:  leave
        ret


_Z10printlnInti:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     dword [rbp-44H], edi


        mov     rax, qword [fs:abs 28H]
        mov     qword [rbp-8H], rax
        xor     eax, eax
        cmp     dword [rbp-44H], 0
        jnz     L_012
        mov     edi, 48
        call    putchar
L_012:  cmp     dword [rbp-44H], 0
        jns     L_013
        neg     dword [rbp-44H]
        mov     edi, 45
        call    putchar
L_013:  mov     dword [rbp-38H], 0
L_014:  cmp     dword [rbp-44H], 0
        jle     L_015
        mov     esi, dword [rbp-38H]
        lea     eax, [rsi+1H]
        mov     dword [rbp-38H], eax
        mov     ecx, dword [rbp-44H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        shl     eax, 2
        add     eax, edx
        add     eax, eax
        sub     ecx, eax
        mov     edx, ecx
        movsxd  rax, esi
        mov     dword [rbp+rax*4-30H], edx
        mov     ecx, dword [rbp-44H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        mov     dword [rbp-44H], eax
        jmp     L_014

L_015:  mov     eax, dword [rbp-38H]
        sub     eax, 1
        mov     dword [rbp-34H], eax
L_016:  cmp     dword [rbp-34H], 0
        js      L_017
        mov     eax, dword [rbp-34H]
        cdqe
        mov     eax, dword [rbp+rax*4-30H]
        add     eax, 48
        mov     edi, eax
        call    putchar
        sub     dword [rbp-34H], 1
        jmp     L_016

L_017:  mov     edi, 10
        call    putchar
        nop
        mov     rax, qword [rbp-8H]


        xor     rax, qword [fs:abs 28H]
        jz      L_018
        call    __stack_chk_fail
L_018:  leave
        ret


_Z9getStringv:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     edi, 266
        call    malloc
        mov     qword [rbp-8H], rax
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rax
        mov     edi, L_043
        mov     eax, 0
        call    scanf
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rdi, rax
        call    strlen
        mov     rdx, rax
        mov     rax, qword [rbp-8H]
        mov     qword [rax], rdx
        mov     rax, qword [rbp-8H]
        leave
        ret


_Z6getIntv:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        call    getchar
        mov     byte [rbp-6H], al
        mov     byte [rbp-5H], 0
L_019:  cmp     byte [rbp-6H], 47
        jle     L_020
        cmp     byte [rbp-6H], 57
        jle     L_022
L_020:  cmp     byte [rbp-6H], 45
        jnz     L_021
        mov     byte [rbp-5H], 1
L_021:  call    getchar
        mov     byte [rbp-6H], al
        jmp     L_019

L_022:  movsx   eax, byte [rbp-6H]
        sub     eax, 48
        mov     dword [rbp-4H], eax
        call    getchar
        mov     byte [rbp-6H], al
L_023:  cmp     byte [rbp-6H], 47
        jle     L_024
        cmp     byte [rbp-6H], 57
        jg      L_024
        mov     edx, dword [rbp-4H]
        mov     eax, edx
        shl     eax, 2
        add     eax, edx
        add     eax, eax
        mov     edx, eax
        movsx   eax, byte [rbp-6H]
        add     eax, edx
        sub     eax, 48
        mov     dword [rbp-4H], eax
        call    getchar
        mov     byte [rbp-6H], al
        jmp     L_023

L_024:  cmp     byte [rbp-5H], 0
        jz      L_025
        mov     eax, dword [rbp-4H]
        neg     eax
        jmp     L_026

L_025:  mov     eax, dword [rbp-4H]
L_026:  leave
        ret


_Z8toStringi:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 96
        mov     dword [rbp-54H], edi


        mov     rax, qword [fs:abs 28H]
        mov     qword [rbp-8H], rax
        xor     eax, eax
        mov     dword [rbp-44H], 0
        mov     dword [rbp-40H], 0
        cmp     dword [rbp-54H], 0
        jns     L_027
        mov     dword [rbp-44H], 1
        neg     dword [rbp-54H]
L_027:  cmp     dword [rbp-54H], 0
        jnz     L_028
        add     dword [rbp-40H], 1
        mov     eax, dword [rbp-40H]
        cdqe
        mov     dword [rbp+rax*4-30H], 0
        jmp     L_029

L_028:  cmp     dword [rbp-54H], 0
        jz      L_029
        add     dword [rbp-40H], 1
        mov     ecx, dword [rbp-54H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        shl     eax, 2
        add     eax, edx
        add     eax, eax
        sub     ecx, eax
        mov     edx, ecx
        mov     eax, dword [rbp-40H]
        cdqe
        mov     dword [rbp+rax*4-30H], edx
        mov     ecx, dword [rbp-54H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        mov     dword [rbp-54H], eax
        jmp     L_028

L_029:  mov     edx, dword [rbp-40H]
        mov     eax, dword [rbp-44H]
        add     eax, edx
        add     eax, 9
        cdqe
        mov     rdi, rax
        call    malloc
        mov     qword [rbp-38H], rax
        mov     edx, dword [rbp-40H]
        mov     eax, dword [rbp-44H]
        add     eax, edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-38H]
        mov     qword [rax], rdx
        add     qword [rbp-38H], 8
        mov     edx, dword [rbp-40H]
        mov     eax, dword [rbp-44H]
        add     eax, edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-38H]
        add     rax, rdx
        mov     byte [rax], 0
        cmp     dword [rbp-44H], 0
        jz      L_030
        mov     rax, qword [rbp-38H]
        mov     byte [rax], 45
L_030:  mov     dword [rbp-3CH], 0
L_031:  mov     eax, dword [rbp-3CH]
        cmp     eax, dword [rbp-40H]
        jge     L_032
        mov     edx, dword [rbp-3CH]
        mov     eax, dword [rbp-44H]
        add     eax, edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-38H]
        add     rdx, rax
        mov     eax, dword [rbp-40H]
        sub     eax, dword [rbp-3CH]
        cdqe
        mov     eax, dword [rbp+rax*4-30H]
        add     eax, 48
        mov     byte [rdx], al
        add     dword [rbp-3CH], 1
        jmp     L_031

L_032:  mov     rax, qword [rbp-38H]
        sub     rax, 8
        mov     rsi, qword [rbp-8H]


        xor     rsi, qword [fs:abs 28H]
        jz      L_033
        call    __stack_chk_fail
L_033:  leave
        ret


_Z27__member___string_substringPcii:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword [rbp-18H], rdi
        mov     dword [rbp-1CH], esi
        mov     dword [rbp-20H], edx
        mov     eax, dword [rbp-20H]
        sub     eax, dword [rbp-1CH]
        add     eax, 1
        mov     dword [rbp-0CH], eax
        mov     eax, dword [rbp-0CH]
        add     eax, 9
        cdqe
        mov     rdi, rax
        call    malloc
        mov     qword [rbp-8H], rax
        mov     eax, dword [rbp-0CH]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        mov     qword [rax], rdx
        mov     eax, dword [rbp-1CH]
        cdqe
        add     rax, 8
        add     qword [rbp-18H], rax
        add     qword [rbp-8H], 8
        mov     dword [rbp-10H], 0
L_034:  mov     eax, dword [rbp-10H]
        cmp     eax, dword [rbp-0CH]
        jge     L_035
        mov     eax, dword [rbp-10H]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rdx, rax
        mov     eax, dword [rbp-10H]
        movsxd  rcx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rcx
        movzx   eax, byte [rax]
        mov     byte [rdx], al
        add     dword [rbp-10H], 1
        jmp     L_034

L_035:  mov     eax, dword [rbp-0CH]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rax, rdx
        mov     byte [rax], 0
        mov     rax, qword [rbp-8H]
        sub     rax, 8
        leave
        ret


_Z26__member___string_parseIntPc:
        push    rbp
        mov     rbp, rsp
        mov     qword [rbp-18H], rdi
        add     qword [rbp-18H], 8
        mov     byte [rbp-9H], 0
        mov     dword [rbp-8H], 0
L_036:  mov     eax, dword [rbp-8H]
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        cmp     al, 47
        jle     L_037
        mov     eax, dword [rbp-8H]
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        cmp     al, 57
        jle     L_038
L_037:  mov     eax, dword [rbp-8H]
        lea     edx, [rax+1H]
        mov     dword [rbp-8H], edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        cmp     al, 45
        sete    al
        test    al, al
        jz      L_036
        mov     byte [rbp-9H], 1
        jmp     L_036

L_038:  mov     eax, dword [rbp-8H]
        lea     edx, [rax+1H]
        mov     dword [rbp-8H], edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        movsx   eax, al
        sub     eax, 48
        mov     dword [rbp-4H], eax
L_039:  mov     eax, dword [rbp-8H]
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        cmp     al, 47
        jle     L_040
        mov     eax, dword [rbp-8H]
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        cmp     al, 57
        jg      L_040
        mov     edx, dword [rbp-4H]
        mov     eax, edx
        shl     eax, 2
        add     eax, edx
        add     eax, eax
        mov     ecx, eax
        mov     eax, dword [rbp-8H]
        lea     edx, [rax+1H]
        mov     dword [rbp-8H], edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        movsx   eax, al
        add     eax, ecx
        sub     eax, 48
        mov     dword [rbp-4H], eax
        jmp     L_039

L_040:  cmp     byte [rbp-9H], 0
        jz      L_041
        mov     eax, dword [rbp-4H]
        neg     eax
        jmp     L_042

L_041:  mov     eax, dword [rbp-4H]
L_042:  pop     rbp
        ret


_Z21__member___string_ordPci:
        push    rbp
        mov     rbp, rsp
        mov     qword [rbp-8H], rdi
        mov     dword [rbp-0CH], esi
        add     dword [rbp-0CH], 8
        mov     eax, dword [rbp-0CH]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rax, rdx
        movzx   eax, byte [rax]
        movsx   eax, al
        pop     rbp
        ret



SECTION .data   


SECTION .bss    


SECTION .rodata 

L_043:
        db 25H, 73H, 00H


