		global	main

		extern	malloc

		section	.bss
__static_data_INF_1:	resq	1
__static_data_nMax_1:	resq	1
__static_data_n_1:	resq	1
__static_data_m_1:	resq	1
__static_data_id_cnt_1:	resq	1
__static_data_din_1:	resq	1
__static_data_sp_1:	resq	1
__static_data_dintree_1:	resq	1
__static_data_char_ID_1:	resq	1

		section	.data
__static_data_static_str_1:
		dq		2
		db		48, 10, 0
__static_data_static_str_2:
		dq		1
		db		10, 0
__static_data_static_str_3:
		dq		2
		db		73, 68, 0

		section	.text

# function main

main:
		push	r15
		push	r13
		push	r12
		push	r14
		push	rbx
		push	rbp
		sub		rsp, 312
		mov		rbp, rsp
		mov		r15, 1000000000
		mov		r9, 4000010
		mov		qword [rbp+200], r9
		mov		r9, 0
		mov		qword [rbp+56], r9
		mov		r9, qword [rbp+200]
		mov		r11, r9
		imul	r11, 8
		add		r11, 8
		push	r10
		push	r11
		push	r9
		mov		rdi, r11
		push	0
		call	malloc
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		mov		r9, qword [rbp+200]
		mov		qword [r11], r9
		mov		r9, r11
		mov		qword [rbp+240], r9
		mov		r9, __static_data_static_str_3
		mov		qword [rbp+160], r9

__block___init_func_entry_1:
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		mov		r9, r11
		mov		qword [rbp+280], r9
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		mov		r9, r11
		mov		qword [rbp+104], r9
		push	r10
		push	r11
		push	r9
		mov		rdi, 8
		push	0
		call	malloc
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		mov		qword [r11], 0

__block_splay_tree_entry_1:
		mov		r9, r11
		mov		qword [rbp+168], r9
		push	r10
		push	r11
		push	r9
		mov		rdi, 8
		push	0
		call	malloc
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r13, rax
		mov		r11, r13
		mov		qword [r11], 0

__block_splay_tree_entry_2:
		mov		r11, 0
		imul	r11, 8
		mov		r9, qword [rbp+240]
		add		r11, r9
		mov		r12, r15
		neg		r12
		mov		qword [r11+8], r12
		mov		r9, qword [rbp+280]
		mov		r12, r9
		inc		r12
		imul	r12, 8
		mov		r9, qword [rbp+240]
		add		r12, r9
		mov		r11, r15
		neg		r11
		mov		qword [r12+8], r11
		mov		r9, 1
		mov		qword [rbp+16], r9

__block_for_cond_1:
		mov		r9, qword [rbp+16]
		mov		r10, qword [rbp+280]
		and		r9, -1
		and		r10, -1
		xor		rax, rax
		cmp		r9, r10
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_1

__block_for_after_1:
		mov		r9, qword [rbp+280]
		mov		r12, r9
		inc		r12
		mov		r9, qword [rbp+168]
		mov		r11, r9
		mov		r9, 0
		mov		qword [rbp+96], r9
		mov		r9, r12
		mov		qword [rbp+256], r9
		push	r10
		push	r11
		push	r9
		mov		rdi, 96
		push	0
		call	malloc
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r12, rax
		mov		qword [r11], r12
		mov		r9, qword [rbp+56]
		inc		r9
		mov		qword [rbp+56], r9
		mov		r9, r12
		mov		qword [rbp+192], r9
		mov		r12, 0
		mov		r9, qword [rbp+56]
		mov		r14, r9
		mov		r9, qword [rbp+192]
		mov		qword [r9], r14
		mov		r9, qword [rbp+192]
		mov		qword [r9+16], 1
		mov		r9, qword [rbp+192]
		mov		qword [r9+32], 0
		mov		r9, qword [rbp+192]
		mov		qword [r9+48], 0
		mov		r9, qword [rbp+192]
		mov		qword [r9+40], 0
		mov		r9, qword [rbp+192]
		mov		qword [r9+24], r12
		mov		r9, qword [rbp+192]
		mov		qword [r9+8], r12
		mov		r9, qword [rbp+192]
		mov		qword [r9+56], r12
		mov		r9, qword [rbp+192]
		mov		qword [r9+64], r12
		mov		r9, qword [rbp+192]
		mov		qword [r9+72], r12
		mov		r12, 2
		imul	r12, 8
		add		r12, 8
		push	r10
		push	r11
		push	r9
		mov		rdi, r12
		push	0
		call	malloc
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r12, rax
		mov		qword [r12], 2
		mov		r9, qword [rbp+192]
		mov		qword [r9+80], r12
		mov		r9, qword [rbp+192]
		mov		r14, qword [r9+80]
		mov		r12, 0
		imul	r12, 8
		add		r12, r14
		mov		qword [r12+8], 0
		mov		r9, qword [rbp+192]
		mov		r14, qword [r9+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r14
		mov		qword [r12+8], 0
		mov		r9, qword [rbp+192]
		mov		qword [r9+88], 0

__block_init_entry_1:
		mov		r12, qword [r11]
		mov		r9, qword [rbp+56]
		mov		qword [__static_data_id_cnt_1], r9
		mov		r9, qword [rbp+240]
		mov		qword [__static_data_din_1], r9
		push	r11
		push	r9
		mov		rdi, r11
		mov		rsi, r12
		mov		rdx, 0
		mov		rax, qword [rbp+96]
		mov		rcx, rax
		mov		rax, qword [rbp+256]
		mov		r8, rax
		call	__block_build_entry_1
		pop		r9
		pop		r11
		mov		r11, rax
		mov		r9, qword [__static_data_id_cnt_1]
		mov		qword [rbp+56], r9
		mov		r9, 1
		mov		qword [rbp+16], r9

__block_for_cond_2:
		mov		r9, qword [rbp+16]
		mov		r10, qword [rbp+104]
		and		r9, -1
		and		r10, -1
		xor		rax, rax
		cmp		r9, r10
		setle	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_2
		jmp		__block_for_after_2

__block_for_body_2:
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z9getStringv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		mov		r9, r11
		mov		qword [rbp+48], r9
		push	r10
		push	r11
		push	r9
		push	0
		mov		rax, qword [rbp+48]
		mov		rdi, rax
		mov		rsi, 0
		call	_Z21__member___string_ordPci
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		push	r10
		push	r11
		push	r9
		push	0
		mov		rax, qword [rbp+160]
		mov		rdi, rax
		mov		rsi, 0
		call	_Z21__member___string_ordPci
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r12, rax
		and		r11, -1
		and		r12, -1
		xor		rax, rax
		cmp		r11, r12
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_1
		jmp		__block_if_after_1

__block_if_then_1:
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		mov		r9, r11
		mov		qword [rbp+296], r9
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		mov		r9, r11
		mov		qword [rbp+112], r9
		mov		r11, 1

__block_for_cond_3:
		mov		r9, qword [rbp+112]
		and		r11, -1
		and		r9, -1
		xor		rax, rax
		cmp		r11, r9
		setle	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_for_body_3

__block_for_after_3:
		mov		r9, 1
		mov		qword [rbp+184], r9
		mov		r9, qword [rbp+112]
		mov		r11, r9
		push	r10
		push	r11
		push	r9
		mov		rdi, 96
		push	0
		call	malloc
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r12, rax
		mov		qword [r13], r12
		mov		r9, qword [rbp+56]
		inc		r9
		mov		qword [rbp+56], r9
		mov		r14, 0
		mov		r9, qword [rbp+56]
		mov		qword [rbp+88], r9
		mov		qword [r12], r9
		mov		qword [r12+16], 1
		mov		qword [r12+32], 0
		mov		qword [r12+48], 0
		mov		qword [r12+40], 0
		mov		qword [r12+24], r14
		mov		qword [r12+8], r14
		mov		qword [r12+56], r14
		mov		qword [r12+64], r14
		mov		qword [r12+72], r14
		mov		r14, 2
		imul	r14, 8
		add		r14, 8
		push	r10
		push	r11
		push	r9
		mov		rdi, r14
		push	0
		call	malloc
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r14, rax
		mov		qword [r14], 2
		mov		qword [r12+80], r14
		mov		r9, qword [r12+80]
		mov		qword [rbp], r9
		mov		r14, 0
		imul	r14, 8
		mov		r9, qword [rbp]
		add		r14, r9
		mov		qword [r14+8], 0
		mov		r14, qword [r12+80]
		mov		r9, 1
		mov		qword [rbp+208], r9
		imul	r9, 8
		mov		qword [rbp+208], r9
		add		r9, r14
		mov		qword [rbp+208], r9
		mov		qword [r9+8], 0
		mov		qword [r12+88], 0

__block_init_entry_2:
		mov		r12, qword [r13]
		mov		r9, qword [rbp+56]
		mov		qword [__static_data_id_cnt_1], r9
		mov		r9, qword [rbp+240]
		mov		qword [__static_data_din_1], r9
		push	r11
		push	r9
		mov		rdi, r13
		mov		rsi, r12
		mov		rdx, 0
		mov		rax, qword [rbp+184]
		mov		rcx, rax
		mov		r8, r11
		call	__block_build_entry_1
		pop		r9
		pop		r11
		mov		r11, rax
		mov		r9, qword [__static_data_id_cnt_1]
		mov		qword [rbp+56], r9
		mov		r9, qword [rbp+296]
		mov		r11, r9
		inc		r11
		mov		r14, r11
		mov		r9, qword [rbp+168]
		mov		r11, r9
		mov		r12, r14
		inc		r12
		push	r11
		push	r9
		mov		rdi, r11
		mov		rsi, r12
		call	__block_find_entry_1
		pop		r9
		pop		r11
		mov		r12, rax
		mov		r9, r12
		mov		qword [rbp+304], r9
		push	r11
		push	0
		mov		rax, qword [rbp+304]
		mov		rdi, rax
		mov		rsi, 0
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r12, rax
		mov		r9, qword [rbp+304]
		mov		qword [r11], r9
		push	r11
		push	r9
		mov		rdi, r11
		mov		rsi, r14
		call	__block_find_entry_1
		pop		r9
		pop		r11
		mov		r12, rax
		mov		r9, r12
		mov		qword [rbp+304], r9
		mov		r12, qword [r11]
		push	r11
		push	0
		mov		rax, qword [rbp+304]
		mov		rdi, rax
		mov		rsi, r12
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r12, rax
		mov		r9, qword [rbp+304]
		mov		r14, qword [r9+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r14
		mov		r14, qword [r13]
		mov		qword [r12+8], r14
		mov		r12, qword [r13]
		mov		r9, qword [rbp+304]
		mov		qword [r12+88], r9
		push	r11
		push	0
		mov		rax, qword [rbp+304]
		mov		rdi, rax
		mov		rsi, 0
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r12, rax
		mov		r9, qword [rbp+304]
		mov		qword [r11], r9
		jmp		__block_if_after_1

__block_merge_entry_1:
		jmp		__block_if_after_1

__block_for_body_3:
		mov		r14, r11
		imul	r14, 8
		mov		r9, qword [rbp+240]
		add		r14, r9
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r12, rax
		mov		qword [r14+8], r12

__block_for_step_1:
		inc		r11
		jmp		__block_for_cond_3

__block_if_after_1:
		push	r10
		push	r11
		push	r9
		push	0
		mov		rax, qword [rbp+48]
		mov		rdi, rax
		mov		rsi, 0
		call	_Z21__member___string_ordPci
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		push	r10
		push	r11
		push	r9
		push	0
		mov		rax, qword [rbp+160]
		mov		rdi, rax
		mov		rsi, 1
		call	_Z21__member___string_ordPci
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r12, rax
		and		r11, -1
		and		r12, -1
		xor		rax, rax
		cmp		r11, r12
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_2
		jmp		__block_if_after_2

__block_if_then_2:
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r14, rax
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r12, rax
		mov		r11, r14
		inc		r11
		add		r14, r12
		mov		r9, qword [rbp+168]
		mov		qword [rbp+72], r9
		mov		r12, r11
		mov		r11, r14
		inc		r11
		push	r11
		push	r9
		mov		rax, qword [rbp+72]
		mov		rdi, rax
		mov		rsi, r11
		call	__block_find_entry_1
		pop		r9
		pop		r11
		mov		r14, rax
		push	r11
		push	0
		mov		rdi, r14
		mov		rsi, 0
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		mov		r9, qword [rbp+72]
		mov		qword [r9], r14
		mov		r11, r12
		dec		r11
		push	r11
		push	r9
		mov		rax, qword [rbp+72]
		mov		rdi, rax
		mov		rsi, r11
		call	__block_find_entry_1
		pop		r9
		pop		r11
		mov		r14, rax
		mov		r9, qword [rbp+72]
		mov		r11, qword [r9]
		push	r11
		push	0
		mov		rdi, r14
		mov		rsi, r11
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		mov		r11, qword [r14+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r11
		mov		r12, qword [r12+8]
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_3
		jmp		__block_if_after_3

__block_if_then_3:
		mov		r11, qword [r14+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r11
		mov		r12, qword [r12+8]
		push	r11
		push	0
		mov		rax, qword [rbp+72]
		mov		rdi, rax
		mov		rsi, r12
		call	__block_dfs_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax

__block_if_after_3:
		mov		r12, qword [r14+80]
		mov		r11, 1
		imul	r11, 8
		add		r11, r12
		mov		qword [r11+8], 0
		mov		r9, 0
		mov		qword [rbp+8], r9

__block_while_cond_1:
		mov		r11, qword [r14+88]
		mov		r9, qword [rbp+8]
		mov		r12, r9
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		sete	al
		mov		r9, rax
		mov		qword [rbp+224], r9
		cmp		r9, 1
		je		__block_if_then_4

__block_if_after_4:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r9, rax
		mov		qword [rbp+136], r9
		cmp		r9, 1
		je		__block_if_then_5
		jmp		__block_if_after_5

__block_if_then_5:
		mov		r11, 0
		jmp		__block_equ_end_1

__block_if_after_5:
		mov		r11, qword [r11]
		mov		r12, qword [r12]
		and		r11, -1
		and		r12, -1
		xor		rax, rax
		cmp		r11, r12
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_null_1
		jmp		__block_null_2

__block_null_1:
		mov		r11, 1
		jmp		__block_null_3

__block_null_2:
		mov		r11, 0

__block_null_3:
		jmp		__block_equ_end_1

__block_if_then_4:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_6

__block_if_after_6:
		mov		r11, 0
		jmp		__block_equ_end_1

__block_if_then_6:
		mov		r11, 1

__block_equ_end_1:
		cmp		r11, 1
		je		__block_while_after_1

__block_while_body_1:
		mov		r11, qword [r14+88]
		mov		r9, r11
		mov		qword [rbp+272], r9
		mov		r11, qword [r9+88]
		mov		r9, r11
		mov		qword [rbp+248], r9
		mov		r9, qword [rbp+8]
		mov		r12, r9
		mov		r9, qword [rbp+248]
		and		r9, -1
		xor		rax, rax
		cmp		r9, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_7
		jmp		__block_if_after_7

__block_if_then_7:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_8

__block_if_after_8:
		mov		r11, 0
		jmp		__block_equ_end_2

__block_if_then_8:
		mov		r11, 1
		jmp		__block_equ_end_2

__block_if_after_7:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_9

__block_if_after_9:
		mov		r9, qword [rbp+248]
		mov		r11, qword [r9]
		mov		r12, qword [r12]
		and		r11, -1
		and		r12, -1
		xor		rax, rax
		cmp		r11, r12
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_null_4

__block_null_5:
		mov		r11, 0
		jmp		__block_null_6

__block_null_4:
		mov		r11, 1

__block_null_6:
		jmp		__block_equ_end_2

__block_if_then_9:
		mov		r11, 0

__block_equ_end_2:
		cmp		r11, 1
		je		__block_if_then_10

__block_if_after_10:
		mov		r9, qword [rbp+272]
		mov		r11, qword [r9+88]
		mov		r9, qword [rbp+272]
		mov		r12, r9
		mov		r9, qword [r11+80]
		mov		qword [rbp+120], r9
		mov		r11, 0
		imul	r11, 8
		mov		r9, qword [rbp+120]
		add		r11, r9
		mov		r11, qword [r11+8]
		mov		r9, r11
		mov		qword [rbp+176], r9
		mov		r9, r12
		mov		qword [rbp+24], r9
		mov		r9, qword [rbp+176]
		and		r9, -1
		xor		rax, rax
		cmp		r9, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_11
		jmp		__block_if_after_11

__block_if_then_11:
		mov		r9, qword [rbp+24]
		and		r9, -1
		xor		rax, rax
		cmp		r9, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_12
		jmp		__block_if_after_12

__block_if_then_12:
		mov		r11, 1
		jmp		__block_equ_end_3

__block_if_after_12:
		mov		r11, 0
		jmp		__block_equ_end_3

__block_if_after_11:
		mov		r9, qword [rbp+24]
		and		r9, -1
		xor		rax, rax
		cmp		r9, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_13

__block_if_after_13:
		mov		r9, qword [rbp+176]
		mov		r12, qword [r9]
		mov		r9, qword [rbp+24]
		mov		r11, qword [r9]
		and		r12, -1
		and		r11, -1
		xor		rax, rax
		cmp		r12, r11
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_null_7
		jmp		__block_null_8

__block_null_7:
		mov		r11, 1
		jmp		__block_null_9

__block_null_8:
		mov		r11, 0

__block_null_9:
		jmp		__block_equ_end_3

__block_if_then_13:
		mov		r11, 0

__block_equ_end_3:
		cmp		r11, 1
		je		__block_if_then_14
		jmp		__block_if_else_1

__block_if_then_14:
		mov		r11, 0
		jmp		__block___member_Node_judge_end_1

__block_if_else_1:
		mov		r11, 1

__block___member_Node_judge_end_1:
		mov		r9, r11
		mov		qword [rbp+152], r9
		mov		r9, qword [rbp+272]
		mov		r11, r9
		mov		r12, r14
		mov		r11, qword [r11+80]
		mov		r9, 0
		mov		qword [rbp+264], r9
		imul	r9, 8
		mov		qword [rbp+264], r9
		add		r9, r11
		mov		qword [rbp+264], r9
		mov		r9, qword [r9+8]
		mov		qword [rbp+264], r9
		mov		qword [rbp+216], r9
		and		r9, -1
		xor		rax, rax
		cmp		r9, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_15

__block_if_after_14:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_16

__block_if_after_15:
		mov		r9, qword [rbp+216]
		mov		r11, qword [r9]
		mov		r12, qword [r12]
		and		r11, -1
		and		r12, -1
		xor		rax, rax
		cmp		r11, r12
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_null_10
		jmp		__block_null_11

__block_null_10:
		mov		r11, 1
		jmp		__block_null_12

__block_null_11:
		mov		r11, 0

__block_null_12:
		jmp		__block_equ_end_4

__block_if_then_16:
		mov		r11, 0
		jmp		__block_equ_end_4

__block_if_then_15:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_17

__block_if_after_16:
		mov		r11, 0
		jmp		__block_equ_end_4

__block_if_then_17:
		mov		r11, 1

__block_equ_end_4:
		cmp		r11, 1
		je		__block_if_then_18
		jmp		__block_if_else_2

__block_if_then_18:
		mov		r11, 0
		jmp		__block___member_Node_judge_end_2

__block_if_else_2:
		mov		r11, 1

__block___member_Node_judge_end_2:
		mov		r9, qword [rbp+152]
		and		r9, -1
		and		r11, -1
		xor		rax, rax
		cmp		r9, r11
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_19

__block_if_else_3:
		push	r11
		push	0
		mov		rdi, r14
		call	__block_rot_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		push	r11
		push	0
		mov		rdi, r14
		call	__block_rot_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		jmp		__block_while_cond_1

__block_if_then_19:
		push	r11
		push	0
		mov		rax, qword [rbp+272]
		mov		rdi, rax
		call	__block_rot_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		push	r11
		push	0
		mov		rdi, r14
		call	__block_rot_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		jmp		__block_while_cond_1

__block_if_after_17:
		jmp		__block_while_cond_1

__block_if_then_10:
		push	r11
		push	0
		mov		rdi, r14
		call	__block_rot_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		jmp		__block_while_cond_1

__block_while_after_1:
		push	r11
		push	0
		mov		rdi, r14
		call	__block_push_up_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		mov		r11, qword [r14+88]
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_20
		jmp		__block_if_after_18

__block_if_then_20:
		mov		r11, qword [r14+88]
		push	r11
		push	0
		mov		rdi, r11
		call	__block_push_up_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax

__block_if_after_18:
		mov		r9, qword [rbp+72]
		mov		qword [r9], r14

__block_if_after_2:
		push	r10
		push	r11
		push	r9
		push	0
		mov		rax, qword [rbp+48]
		mov		rdi, rax
		mov		rsi, 0
		call	_Z21__member___string_ordPci
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		and		r11, -1
		xor		rax, rax
		cmp		r11, 82
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_21
		jmp		__block_if_after_19

__block_if_then_21:
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		mov		r14, r11
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		mov		r12, r14
		inc		r12
		add		r14, r11
		mov		r9, qword [rbp+168]
		mov		qword [rbp+80], r9
		mov		r11, r12
		mov		r12, r14
		inc		r12
		push	r11
		push	r9
		mov		rax, qword [rbp+80]
		mov		rdi, rax
		mov		rsi, r12
		call	__block_find_entry_1
		pop		r9
		pop		r11
		mov		r12, rax
		push	r11
		push	0
		mov		rdi, r12
		mov		rsi, 0
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r14, rax
		mov		r9, qword [rbp+80]
		mov		qword [r9], r12
		dec		r11
		push	r11
		push	r9
		mov		rax, qword [rbp+80]
		mov		rdi, rax
		mov		rsi, r11
		call	__block_find_entry_1
		pop		r9
		pop		r11
		mov		r12, rax
		mov		r9, qword [rbp+80]
		mov		r11, qword [r9]
		push	r11
		push	0
		mov		rdi, r12
		mov		rsi, r11
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		mov		r11, qword [r12+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r11
		mov		r12, qword [r12+8]
		push	r11
		push	r9
		mov		rdi, r12
		call	__block_push_down_entry_1
		pop		r9
		pop		r11
		mov		r11, rax
		mov		r11, qword [r12+80]
		mov		r14, 0
		imul	r14, 8
		add		r14, r11
		mov		r14, qword [r14+8]
		mov		r9, r14
		mov		qword [rbp+40], r9
		mov		r14, qword [r12+80]
		mov		r11, 0
		imul	r11, 8
		add		r11, r14
		mov		r14, qword [r12+80]
		mov		r9, 1
		mov		qword [rbp+32], r9
		imul	r9, 8
		mov		qword [rbp+32], r9
		add		r9, r14
		mov		qword [rbp+32], r9
		mov		r9, qword [r9+8]
		mov		qword [rbp+32], r9
		mov		qword [r11+8], r9
		mov		r14, qword [r12+80]
		mov		r11, 1
		imul	r11, 8
		add		r11, r14
		mov		r9, qword [rbp+40]
		mov		qword [r11+8], r9
		mov		r14, qword [r12+56]
		mov		r11, qword [r12+64]
		mov		qword [r12+56], r11
		mov		qword [r12+64], r14
		mov		r11, qword [r12+48]
		xor		r11, 1
		mov		qword [r12+48], r11

__block_addtag_ro_entry_1:
		push	r11
		push	r9
		mov		rdi, r12
		call	__block_push_down_entry_1
		pop		r9
		pop		r11
		mov		r11, rax
		push	r11
		push	0
		mov		rdi, r12
		mov		rsi, 0
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		mov		r9, qword [rbp+80]
		mov		qword [r9], r12
		jmp		__block_if_after_19

__block_rol_entry_1:

__block_if_after_19:
		push	r10
		push	r11
		push	r9
		push	0
		mov		rax, qword [rbp+48]
		mov		rdi, rax
		mov		rsi, 0
		call	_Z21__member___string_ordPci
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		and		r11, -1
		xor		rax, rax
		cmp		r11, 71
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_22
		jmp		__block_if_after_20

__block_if_then_22:
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r12, rax
		mov		r14, r12
		and		r14, -1
		xor		rax, rax
		cmp		r14, 0
		setg	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_if_then_23
		jmp		__block_if_else_4

__block_if_then_23:
		mov		r9, r11
		mov		qword [rbp+144], r9
		inc		r9
		mov		qword [rbp+144], r9
		mov		r12, r11
		add		r12, r14
		mov		r9, qword [rbp+168]
		mov		r14, r9
		mov		r9, qword [rbp+144]
		mov		r11, r9
		inc		r12
		push	r11
		push	r9
		mov		rdi, r14
		mov		rsi, r12
		call	__block_find_entry_1
		pop		r9
		pop		r11
		mov		r12, rax
		mov		r9, r12
		mov		qword [rbp+232], r9
		push	r11
		push	0
		mov		rax, qword [rbp+232]
		mov		rdi, rax
		mov		rsi, 0
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r12, rax
		mov		r9, qword [rbp+232]
		mov		qword [r14], r9
		dec		r11
		push	r11
		push	r9
		mov		rdi, r14
		mov		rsi, r11
		call	__block_find_entry_1
		pop		r9
		pop		r11
		mov		r11, rax
		mov		r9, r11
		mov		qword [rbp+232], r9
		mov		r11, qword [r14]
		push	r11
		push	0
		mov		rax, qword [rbp+232]
		mov		rdi, rax
		mov		rsi, r11
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		mov		r9, qword [rbp+232]
		mov		r11, qword [r9+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r11
		mov		r12, qword [r12+8]
		mov		r9, r12
		mov		qword [rbp+232], r9
		push	r11
		push	r9
		mov		rax, qword [rbp+232]
		mov		rdi, rax
		call	__block_push_down_entry_1
		pop		r9
		pop		r11
		mov		r11, rax
		mov		r9, qword [rbp+232]
		mov		r11, qword [r9+24]
		push	r11
		push	0
		mov		rax, qword [rbp+232]
		mov		rdi, rax
		mov		rsi, 0
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r12, rax
		mov		r9, qword [rbp+232]
		mov		qword [r14], r9

__block_getsum_entry_1:
		push	r10
		push	r11
		push	r9
		push	0
		mov		rdi, r11
		call	_Z10printlnInti
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		jmp		__block_if_after_20

__block_if_else_4:
		push	r10
		push	r11
		push	r9
		push	0
		mov		rdi, __static_data_static_str_1
		call	_Z5printPc
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		jmp		__block_if_after_20

__block_if_after_21:

__block_if_after_20:
		push	r10
		push	r11
		push	r9
		push	0
		mov		rax, qword [rbp+48]
		mov		rdi, rax
		mov		rsi, 0
		call	_Z21__member___string_ordPci
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		and		r11, -1
		xor		rax, rax
		cmp		r11, 77
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_24
		jmp		__block_for_step_2

__block_if_then_24:
		push	r10
		push	r11
		push	r9
		push	0
		mov		rax, qword [rbp+48]
		mov		rdi, rax
		mov		rsi, 2
		call	_Z21__member___string_ordPci
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		and		r11, -1
		xor		rax, rax
		cmp		r11, 75
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_25

__block_if_else_5:
		mov		r9, qword [rbp+168]
		mov		r12, r9
		mov		r11, qword [r12]
		push	r11
		push	r9
		mov		rdi, r11
		call	__block_push_down_entry_1
		pop		r9
		pop		r11
		mov		r11, rax
		mov		r11, qword [r12]
		mov		r11, qword [r11+72]

__block_getMax_entry_1:
		push	r10
		push	r11
		push	r9
		push	0
		mov		rdi, r11
		call	_Z8printInti
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		push	r10
		push	r11
		push	r9
		push	0
		mov		rdi, __static_data_static_str_2
		call	_Z5printPc
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		jmp		__block_for_step_2

__block_if_then_25:
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r14, rax
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r12, rax
		mov		r9, r11
		mov		qword [rbp+288], r9
		inc		r9
		mov		qword [rbp+288], r9
		add		r11, r14
		mov		r9, qword [rbp+168]
		mov		qword [rbp+128], r9
		mov		r9, qword [rbp+288]
		mov		qword [rbp+64], r9
		inc		r11
		push	r11
		push	r9
		mov		rax, qword [rbp+128]
		mov		rdi, rax
		mov		rsi, r11
		call	__block_find_entry_1
		pop		r9
		pop		r11
		mov		r14, rax
		push	r11
		push	0
		mov		rdi, r14
		mov		rsi, 0
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		mov		r9, qword [rbp+128]
		mov		qword [r9], r14
		mov		r9, qword [rbp+64]
		mov		r11, r9
		dec		r11
		push	r11
		push	r9
		mov		rax, qword [rbp+128]
		mov		rdi, rax
		mov		rsi, r11
		call	__block_find_entry_1
		pop		r9
		pop		r11
		mov		r14, rax
		mov		r9, qword [rbp+128]
		mov		r11, qword [r9]
		push	r11
		push	0
		mov		rdi, r14
		mov		rsi, r11
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		mov		r11, qword [r14+80]
		mov		r14, 1
		imul	r14, 8
		add		r14, r11
		mov		r14, qword [r14+8]
		push	r11
		push	r9
		mov		rdi, r14
		call	__block_push_down_entry_1
		pop		r9
		pop		r11
		mov		r11, rax
		mov		qword [r14+8], r12
		mov		r11, qword [r14+16]
		imul	r11, r12
		mov		qword [r14+24], r11
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		setge	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_26

__block_if_else_6:
		mov		qword [r14+56], r12
		mov		qword [r14+64], r12
		mov		qword [r14+72], r12
		jmp		__block_if_after_22

__block_if_then_26:
		mov		r11, qword [r14+24]
		mov		qword [r14+56], r11
		mov		r11, qword [r14+24]
		mov		qword [r14+64], r11
		mov		r11, qword [r14+24]
		mov		qword [r14+72], r11

__block_if_after_22:
		mov		qword [r14+32], 1
		mov		qword [r14+40], r12
		push	r11
		push	r9
		mov		rdi, r14
		call	__block_push_down_entry_1
		pop		r9
		pop		r11
		mov		r11, rax
		push	r11
		push	0
		mov		rdi, r14
		mov		rsi, 0
		call	__block_rotto_entry_1
		add		rsp, 8
		pop		r11
		mov		r11, rax
		mov		r9, qword [rbp+128]
		mov		qword [r9], r14
		jmp		__block_for_step_2

__block_change_entry_1:
		jmp		__block_for_step_2

__block_if_after_23:
		jmp		__block_for_step_2

__block_if_after_24:

__block_for_step_2:
		mov		r9, qword [rbp+16]
		inc		r9
		mov		qword [rbp+16], r9
		jmp		__block_for_cond_2

__block_for_after_2:
		mov		r9, qword [rbp+200]
		mov		qword [__static_data_nMax_1], r9
		mov		r9, qword [rbp+56]
		mov		qword [__static_data_id_cnt_1], r9
		mov		r9, qword [rbp+160]
		mov		qword [__static_data_char_ID_1], r9
		mov		qword [__static_data_dintree_1], r13
		mov		qword [__static_data_INF_1], r15
		mov		r9, qword [rbp+280]
		mov		qword [__static_data_n_1], r9
		mov		r9, qword [rbp+104]
		mov		qword [__static_data_m_1], r9
		mov		r9, qword [rbp+168]
		mov		qword [__static_data_sp_1], r9
		mov		r9, qword [rbp+240]
		mov		qword [__static_data_din_1], r9
		mov		rax, 0
		add		rsp, 312
		pop		rbp
		pop		rbx
		pop		r14
		pop		r12
		pop		r13
		pop		r15
		ret

__block_for_body_1:
		mov		r9, qword [rbp+16]
		mov		r12, r9
		imul	r12, 8
		mov		r9, qword [rbp+240]
		add		r12, r9
		push	r10
		push	r11
		push	r9
		push	0
		call	_Z6getIntv
		add		rsp, 8
		pop		r9
		pop		r11
		pop		r10
		mov		r11, rax
		mov		qword [r12+8], r11

__block_for_step_3:
		mov		r9, qword [rbp+16]
		inc		r9
		mov		qword [rbp+16], r9
		jmp		__block_for_cond_1

# function __member_splay_tree_build

__block_build_entry_1:
		push	r15
		push	r13
		push	r12
		push	r14
		push	rbx
		push	rbp
		sub		rsp, 8
		mov		rbp, rsp
		mov		r14, qword [__static_data_id_cnt_1]
		mov		r12, qword [__static_data_din_1]
		mov		r11, rcx
		add		r11, r8
		mov		r13, r11
		mov		rbx, rcx
		mov		rcx, 1
		sar		r13, cl
		mov		rcx, rbx
		and		r13, -1
		push	r8
		push	rdx
		push	rcx
		push	r11
		push	rsi
		push	r9
		mov		rdi, 96
		call	malloc
		pop		r9
		pop		rsi
		pop		r11
		pop		rcx
		pop		rdx
		pop		r8
		mov		r11, rax
		mov		r15, r11
		mov		r11, r13
		imul	r11, 8
		add		r11, r12
		mov		r11, qword [r11+8]
		inc		r14
		mov		qword [r15], r14
		mov		qword [r15+16], 1
		mov		qword [r15+32], 0
		mov		qword [r15+48], 0
		mov		qword [r15+40], 0
		mov		qword [r15+24], r11
		mov		qword [r15+8], r11
		mov		qword [r15+56], r11
		mov		qword [r15+64], r11
		mov		qword [r15+72], r11
		mov		r11, 2
		imul	r11, 8
		add		r11, 8
		push	r8
		push	rdx
		push	rcx
		push	r11
		push	rsi
		push	r9
		mov		rdi, r11
		call	malloc
		pop		r9
		pop		rsi
		pop		r11
		pop		rcx
		pop		rdx
		pop		r8
		mov		r11, rax
		mov		qword [r11], 2
		mov		qword [r15+80], r11
		mov		r12, qword [r15+80]
		mov		r11, 0
		imul	r11, 8
		add		r11, r12
		mov		qword [r11+8], 0
		mov		r11, qword [r15+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r11
		mov		qword [r12+8], 0
		mov		qword [r15+88], 0

__block_init_entry_3:
		mov		r9, r15
		mov		qword [rbp], r9
		mov		r11, qword [r9]
		mov		qword [rsi], r11
		mov		r9, qword [rbp]
		mov		r11, qword [r9+8]
		mov		qword [rsi+8], r11
		mov		r9, qword [rbp]
		mov		r11, qword [r9+16]
		mov		qword [rsi+16], r11
		mov		r9, qword [rbp]
		mov		r11, qword [r9+24]
		mov		qword [rsi+24], r11
		mov		r9, qword [rbp]
		mov		r11, qword [r9+32]
		mov		qword [rsi+32], r11
		mov		r9, qword [rbp]
		mov		r11, qword [r9+40]
		mov		qword [rsi+40], r11
		mov		r9, qword [rbp]
		mov		r11, qword [r9+48]
		mov		qword [rsi+48], r11
		mov		r9, qword [rbp]
		mov		r11, qword [r9+56]
		mov		qword [rsi+56], r11
		mov		r9, qword [rbp]
		mov		r11, qword [r9+64]
		mov		qword [rsi+64], r11
		mov		r9, qword [rbp]
		mov		r11, qword [r9+72]
		mov		qword [rsi+72], r11
		mov		r11, qword [rsi+80]
		mov		r12, 0
		imul	r12, 8
		add		r12, r11
		mov		r9, qword [rbp]
		mov		r15, qword [r9+80]
		mov		r11, 0
		imul	r11, 8
		add		r11, r15
		mov		r11, qword [r11+8]
		mov		qword [r12+8], r11
		mov		r11, qword [rsi+80]
		mov		r15, 1
		imul	r15, 8
		add		r15, r11
		mov		r9, qword [rbp]
		mov		r11, qword [r9+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r11
		mov		r12, qword [r12+8]
		mov		qword [r15+8], r12
		mov		r9, qword [rbp]
		mov		r11, qword [r9+88]
		mov		qword [rsi+88], r11

__block_copy_entry_1:
		mov		qword [rsi+88], rdx
		and		rcx, -1
		and		r13, -1
		xor		rax, rax
		cmp		rcx, r13
		setl	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_27
		jmp		__block_if_after_25

__block_if_then_27:
		mov		r11, qword [rsi+80]
		mov		r12, 0
		imul	r12, 8
		add		r12, r11
		push	r8
		push	rdx
		push	rcx
		push	r11
		push	rsi
		push	r9
		mov		rdi, 96
		call	malloc
		pop		r9
		pop		rsi
		pop		r11
		pop		rcx
		pop		rdx
		pop		r8
		mov		r11, rax
		mov		qword [r12+8], r11
		mov		r12, qword [rsi+80]
		mov		r11, 0
		imul	r11, 8
		add		r11, r12
		mov		r11, qword [r11+8]
		inc		r14
		mov		r15, r11
		mov		r11, 0
		mov		qword [r15], r14
		mov		qword [r15+16], 1
		mov		qword [r15+32], 0
		mov		qword [r15+48], 0
		mov		qword [r15+40], 0
		mov		qword [r15+24], r11
		mov		qword [r15+8], r11
		mov		qword [r15+56], r11
		mov		qword [r15+64], r11
		mov		qword [r15+72], r11
		mov		r11, 2
		imul	r11, 8
		add		r11, 8
		push	r8
		push	rdx
		push	rcx
		push	r11
		push	rsi
		push	r9
		mov		rdi, r11
		call	malloc
		pop		r9
		pop		rsi
		pop		r11
		pop		rcx
		pop		rdx
		pop		r8
		mov		r11, rax
		mov		qword [r11], 2
		mov		qword [r15+80], r11
		mov		r12, 0
		imul	r12, 8
		add		r12, r11
		mov		qword [r12+8], 0
		mov		r11, qword [r15+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r11
		mov		qword [r12+8], 0
		mov		qword [r15+88], 0

__block_init_entry_4:
		mov		r12, qword [rsi+80]
		mov		r11, 0
		imul	r11, 8
		add		r11, r12
		mov		r11, qword [r11+8]
		mov		r12, r13
		dec		r12
		mov		qword [__static_data_id_cnt_1], r14
		push	r11
		push	r9
		push	rdi
		push	rsi
		push	rdx
		push	rcx
		push	r8
		push	0
		push	rdi
		push	rsi
		push	rcx
		mov		rdi, qword [rsp+16]
		mov		rsi, r11
		mov		rdx, qword [rsp+8]
		mov		rcx, qword [rsp]
		mov		r8, r12
		add		rsp, 24
		call	__block_build_entry_1
		add		rsp, 8
		pop		r8
		pop		rcx
		pop		rdx
		pop		rsi
		pop		rdi
		pop		r9
		pop		r11
		mov		r11, rax
		mov		r14, qword [__static_data_id_cnt_1]

__block_if_after_25:
		and		r8, -1
		and		r13, -1
		xor		rax, rax
		cmp		r8, r13
		setg	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_28
		jmp		__block_if_after_26

__block_if_then_28:
		mov		r11, qword [rsi+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r11
		push	r8
		push	rdx
		push	rcx
		push	r11
		push	rsi
		push	r9
		mov		rdi, 96
		call	malloc
		pop		r9
		pop		rsi
		pop		r11
		pop		rcx
		pop		rdx
		pop		r8
		mov		r11, rax
		mov		qword [r12+8], r11
		mov		r12, qword [rsi+80]
		mov		r11, 1
		imul	r11, 8
		add		r11, r12
		mov		r11, qword [r11+8]
		inc		r14
		mov		r15, r11
		mov		r11, 0
		mov		qword [r15], r14
		mov		qword [r15+16], 1
		mov		qword [r15+32], 0
		mov		qword [r15+48], 0
		mov		qword [r15+40], 0
		mov		qword [r15+24], r11
		mov		qword [r15+8], r11
		mov		qword [r15+56], r11
		mov		qword [r15+64], r11
		mov		qword [r15+72], r11
		mov		r11, 2
		imul	r11, 8
		add		r11, 8
		push	r8
		push	rdx
		push	rcx
		push	r11
		push	rsi
		push	r9
		mov		rdi, r11
		call	malloc
		pop		r9
		pop		rsi
		pop		r11
		pop		rcx
		pop		rdx
		pop		r8
		mov		r11, rax
		mov		qword [r11], 2
		mov		qword [r15+80], r11
		mov		r12, 0
		imul	r12, 8
		add		r12, r11
		mov		qword [r12+8], 0
		mov		r12, qword [r15+80]
		mov		r11, 1
		imul	r11, 8
		add		r11, r12
		mov		qword [r11+8], 0
		mov		qword [r15+88], 0

__block_init_entry_5:
		mov		r11, qword [rsi+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r11
		mov		r12, qword [r12+8]
		inc		r13
		mov		qword [__static_data_id_cnt_1], r14
		push	r11
		push	r9
		push	rdi
		push	rsi
		push	rdx
		push	rcx
		push	r8
		push	0
		push	rdi
		push	rsi
		push	r8
		mov		rdi, qword [rsp+16]
		mov		rsi, r12
		mov		rdx, qword [rsp+8]
		mov		rcx, r13
		mov		r8, qword [rsp]
		add		rsp, 24
		call	__block_build_entry_1
		add		rsp, 8
		pop		r8
		pop		rcx
		pop		rdx
		pop		rsi
		pop		rdi
		pop		r9
		pop		r11
		mov		r11, rax
		mov		r14, qword [__static_data_id_cnt_1]

__block_if_after_26:
		push	r11
		push	rdi
		push	rsi
		push	rdx
		push	rcx
		push	r8
		mov		rdi, rsi
		call	__block_push_up_entry_1
		pop		r8
		pop		rcx
		pop		rdx
		pop		rsi
		pop		rdi
		pop		r11
		mov		r11, rax
		mov		qword [__static_data_id_cnt_1], r14
		add		rsp, 8
		pop		rbp
		pop		rbx
		pop		r14
		pop		r12
		pop		r13
		pop		r15
		ret

# function __member_Node_rotto

__block_rotto_entry_1:
		push	r15
		push	r13
		push	r12
		push	r14
		push	rbx
		push	rbp
		sub		rsp, 8
		mov		rbp, rsp

__block_while_cond_2:
		mov		r12, qword [rdi+88]
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_29
		jmp		__block_if_after_27

__block_if_then_29:
		and		rsi, -1
		xor		rax, rax
		cmp		rsi, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_30
		jmp		__block_if_after_28

__block_if_then_30:
		mov		r11, 1
		jmp		__block_equ_end_5

__block_if_after_28:
		mov		r11, 0
		jmp		__block_equ_end_5

__block_if_after_27:
		and		rsi, -1
		xor		rax, rax
		cmp		rsi, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_31

__block_if_after_29:
		mov		r12, qword [r12]
		mov		r11, qword [rsi]
		and		r12, -1
		and		r11, -1
		xor		rax, rax
		cmp		r12, r11
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_null_13
		jmp		__block_null_14

__block_null_13:
		mov		r11, 1
		jmp		__block_null_15

__block_null_14:
		mov		r11, 0

__block_null_15:
		jmp		__block_equ_end_5

__block_if_then_31:
		mov		r11, 0

__block_equ_end_5:
		cmp		r11, 1
		je		__block_while_after_2
		jmp		__block_while_body_2

__block_while_after_2:
		push	r11
		push	rdi
		push	rsi
		push	0
		push	rdi
		mov		rdi, qword [rsp]
		add		rsp, 8
		call	__block_push_up_entry_1
		add		rsp, 8
		pop		rsi
		pop		rdi
		pop		r11
		mov		r11, rax
		mov		r11, qword [rdi+88]
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_32
		jmp		__block_if_after_30

__block_if_then_32:
		mov		r11, qword [rdi+88]
		push	r11
		push	rdi
		push	rsi
		push	0
		mov		rdi, r11
		call	__block_push_up_entry_1
		add		rsp, 8
		pop		rsi
		pop		rdi
		pop		r11
		mov		r11, rax

__block_if_after_30:
		add		rsp, 8
		pop		rbp
		pop		rbx
		pop		r14
		pop		r12
		pop		r13
		pop		r15
		ret

__block_while_body_2:
		mov		r15, qword [rdi+88]
		mov		r11, qword [r15+88]
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		sete	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_if_then_33
		jmp		__block_if_after_31

__block_if_then_33:
		and		rsi, -1
		xor		rax, rax
		cmp		rsi, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_34
		jmp		__block_if_after_32

__block_if_then_34:
		mov		r11, 1
		jmp		__block_equ_end_6

__block_if_after_32:
		mov		r11, 0
		jmp		__block_equ_end_6

__block_if_after_31:
		and		rsi, -1
		xor		rax, rax
		cmp		rsi, 0
		sete	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_if_then_35

__block_if_after_33:
		mov		r11, qword [r11]
		mov		r12, qword [rsi]
		and		r11, -1
		and		r12, -1
		xor		rax, rax
		cmp		r11, r12
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_null_16

__block_null_17:
		mov		r11, 0
		jmp		__block_null_18

__block_null_16:
		mov		r11, 1

__block_null_18:
		jmp		__block_equ_end_6

__block_if_then_35:
		mov		r11, 0

__block_equ_end_6:
		cmp		r11, 1
		je		__block_if_then_36

__block_if_after_34:
		mov		r11, qword [r15+88]
		mov		r12, r15
		mov		r13, qword [r11+80]
		mov		r11, 0
		imul	r11, 8
		add		r11, r13
		mov		r11, qword [r11+8]
		mov		r13, r11
		and		r13, -1
		xor		rax, rax
		cmp		r13, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_37
		jmp		__block_if_after_35

__block_if_then_37:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_38
		jmp		__block_if_after_36

__block_if_then_38:
		mov		r11, 1
		jmp		__block_equ_end_7

__block_if_after_36:
		mov		r11, 0
		jmp		__block_equ_end_7

__block_if_after_35:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_39
		jmp		__block_if_after_37

__block_if_then_39:
		mov		r11, 0
		jmp		__block_equ_end_7

__block_if_after_37:
		mov		r11, qword [r13]
		mov		r12, qword [r12]
		and		r11, -1
		and		r12, -1
		xor		rax, rax
		cmp		r11, r12
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_null_19

__block_null_20:
		mov		r11, 0
		jmp		__block_null_21

__block_null_19:
		mov		r11, 1

__block_null_21:

__block_equ_end_7:
		cmp		r11, 1
		je		__block_if_then_40
		jmp		__block_if_else_7

__block_if_then_40:
		mov		r14, 0
		jmp		__block___member_Node_judge_end_3

__block_if_else_7:
		mov		r14, 1

__block___member_Node_judge_end_3:
		mov		r11, qword [r15+80]
		mov		r13, 0
		imul	r13, 8
		add		r13, r11
		mov		r13, qword [r13+8]
		mov		r12, rdi
		and		r13, -1
		xor		rax, rax
		cmp		r13, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_41
		jmp		__block_if_after_38

__block_if_then_41:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_42
		jmp		__block_if_after_39

__block_if_then_42:
		mov		r11, 1
		jmp		__block_equ_end_8

__block_if_after_39:
		mov		r11, 0
		jmp		__block_equ_end_8

__block_if_after_38:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_43

__block_if_after_40:
		mov		r11, qword [r13]
		mov		r12, qword [r12]
		and		r11, -1
		and		r12, -1
		xor		rax, rax
		cmp		r11, r12
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_null_22

__block_null_23:
		mov		r11, 0
		jmp		__block_null_24

__block_null_22:
		mov		r11, 1

__block_null_24:
		jmp		__block_equ_end_8

__block_if_then_43:
		mov		r11, 0

__block_equ_end_8:
		cmp		r11, 1
		je		__block_if_then_44

__block_if_else_8:
		mov		r11, 1
		jmp		__block___member_Node_judge_end_4

__block_if_then_44:
		mov		r11, 0

__block___member_Node_judge_end_4:
		and		r14, -1
		and		r11, -1
		xor		rax, rax
		cmp		r14, r11
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_45
		jmp		__block_if_else_9

__block_if_then_45:
		push	r11
		push	rdi
		push	rsi
		push	0
		mov		rdi, r15
		call	__block_rot_entry_1
		add		rsp, 8
		pop		rsi
		pop		rdi
		pop		r11
		mov		r11, rax
		push	r11
		push	rdi
		push	rsi
		push	0
		push	rdi
		mov		rdi, qword [rsp]
		add		rsp, 8
		call	__block_rot_entry_1
		add		rsp, 8
		pop		rsi
		pop		rdi
		pop		r11
		mov		r11, rax
		jmp		__block_while_cond_2

__block_if_else_9:
		push	r11
		push	rdi
		push	rsi
		push	0
		push	rdi
		mov		rdi, qword [rsp]
		add		rsp, 8
		call	__block_rot_entry_1
		add		rsp, 8
		pop		rsi
		pop		rdi
		pop		r11
		mov		r11, rax
		push	r11
		push	rdi
		push	rsi
		push	0
		push	rdi
		mov		rdi, qword [rsp]
		add		rsp, 8
		call	__block_rot_entry_1
		add		rsp, 8
		pop		rsi
		pop		rdi
		pop		r11
		mov		r11, rax
		jmp		__block_while_cond_2

__block_if_after_41:
		jmp		__block_while_cond_2

__block_if_then_36:
		push	r11
		push	rdi
		push	rsi
		push	0
		push	rdi
		mov		rdi, qword [rsp]
		add		rsp, 8
		call	__block_rot_entry_1
		add		rsp, 8
		pop		rsi
		pop		rdi
		pop		r11
		mov		r11, rax
		jmp		__block_while_cond_2

# function __member_Node_push_up

__block_push_up_entry_1:
		push	r15
		push	r13
		push	r12
		push	r14
		push	rbx
		push	rbp
		sub		rsp, 8
		mov		rbp, rsp
		mov		qword [rdi+16], 1
		mov		r11, qword [rdi+8]
		mov		qword [rdi+24], r11
		mov		r12, 0

__block_for_cond_4:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 2
		setl	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_4
		jmp		__block_for_after_4

__block_for_body_4:
		mov		r11, qword [rdi+80]
		mov		r13, r12
		imul	r13, 8
		add		r13, r11
		mov		r13, qword [r13+8]
		and		r13, -1
		xor		rax, rax
		cmp		r13, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_46
		jmp		__block_for_step_4

__block_if_then_46:
		mov		r13, qword [rdi+16]
		mov		r11, qword [rdi+80]
		mov		r14, r12
		imul	r14, 8
		add		r14, r11
		mov		r14, qword [r14+8]
		mov		r11, qword [r14+16]
		add		r13, r11
		mov		qword [rdi+16], r13
		mov		r14, qword [rdi+24]
		mov		r13, qword [rdi+80]
		mov		r11, r12
		imul	r11, 8
		add		r11, r13
		mov		r11, qword [r11+8]
		mov		r13, qword [r11+24]
		mov		r11, r14
		add		r11, r13
		mov		qword [rdi+24], r11
		jmp		__block_for_step_4

__block_if_after_42:

__block_for_step_4:
		inc		r12
		jmp		__block_for_cond_4

__block_for_after_4:
		mov		r11, qword [rdi+8]
		mov		qword [rdi+56], r11
		mov		r11, qword [rdi+8]
		mov		qword [rdi+64], r11
		mov		r11, qword [rdi+8]
		mov		qword [rdi+72], r11
		mov		r12, qword [rdi+8]
		mov		r11, qword [rdi+8]
		mov		r13, qword [rdi+80]
		mov		r14, 0
		imul	r14, 8
		add		r14, r13
		mov		r14, qword [r14+8]
		and		r14, -1
		xor		rax, rax
		cmp		r14, 0
		setne	al
		mov		r13, rax
		cmp		r13, 1
		je		__block_if_then_47
		jmp		__block_if_after_43

__block_if_then_47:
		mov		r13, qword [rdi+80]
		mov		r14, 0
		imul	r14, 8
		add		r14, r13
		mov		r14, qword [r14+8]
		mov		r13, qword [r14+56]
		mov		qword [rdi+56], r13
		mov		r13, qword [rdi+80]
		mov		r14, 0
		imul	r14, 8
		add		r14, r13
		mov		r14, qword [r14+8]
		mov		r13, qword [r14+24]
		add		r12, r13
		mov		r14, qword [rdi+80]
		mov		r13, 0
		imul	r13, 8
		add		r13, r14
		mov		r13, qword [r13+8]
		mov		r13, qword [r13+64]
		mov		r14, 0
		and		r13, -1
		and		r14, -1
		xor		rax, rax
		cmp		r13, r14
		setg	al
		mov		r15, rax
		cmp		r15, 1
		je		__block_if_then_48

__block_if_after_44:
		mov		r13, r14
		jmp		__block_max_end_1

__block_if_then_48:

__block_max_end_1:
		add		r11, r13

__block_if_after_43:
		mov		r14, qword [rdi+80]
		mov		r13, 1
		imul	r13, 8
		add		r13, r14
		mov		r13, qword [r13+8]
		and		r13, -1
		xor		rax, rax
		cmp		r13, 0
		setne	al
		mov		r13, rax
		cmp		r13, 1
		je		__block_if_then_49
		jmp		__block_if_after_45

__block_if_then_49:
		mov		r14, qword [rdi+80]
		mov		r13, 1
		imul	r13, 8
		add		r13, r14
		mov		r13, qword [r13+8]
		mov		r13, qword [r13+64]
		mov		qword [rdi+64], r13
		mov		r14, qword [rdi+80]
		mov		r13, 1
		imul	r13, 8
		add		r13, r14
		mov		r13, qword [r13+8]
		mov		r13, qword [r13+24]
		add		r11, r13
		mov		r13, qword [rdi+80]
		mov		r14, 1
		imul	r14, 8
		add		r14, r13
		mov		r14, qword [r14+8]
		mov		r14, qword [r14+56]
		mov		r13, 0
		and		r14, -1
		and		r13, -1
		xor		rax, rax
		cmp		r14, r13
		setg	al
		mov		r15, rax
		cmp		r15, 1
		je		__block_if_then_50
		jmp		__block_if_after_46

__block_if_then_50:
		mov		r13, r14
		jmp		__block_max_end_2

__block_if_after_46:

__block_max_end_2:
		add		r12, r13

__block_if_after_45:
		mov		r13, qword [rdi+56]
		and		r13, -1
		and		r12, -1
		xor		rax, rax
		cmp		r13, r12
		setg	al
		mov		r14, rax
		cmp		r14, 1
		je		__block_if_then_51

__block_if_after_47:
		jmp		__block_max_end_3

__block_if_then_51:
		mov		r12, r13

__block_max_end_3:
		mov		qword [rdi+56], r12
		mov		r12, qword [rdi+64]
		and		r12, -1
		and		r11, -1
		xor		rax, rax
		cmp		r12, r11
		setg	al
		mov		r13, rax
		cmp		r13, 1
		je		__block_if_then_52

__block_if_after_48:
		jmp		__block_max_end_4

__block_if_then_52:
		mov		r11, r12

__block_max_end_4:
		mov		qword [rdi+64], r11
		mov		r12, 0

__block_for_cond_5:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 2
		setl	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_5
		jmp		__block_for_after_5

__block_for_body_5:
		mov		r11, qword [rdi+80]
		mov		r13, r12
		imul	r13, 8
		add		r13, r11
		mov		r13, qword [r13+8]
		and		r13, -1
		xor		rax, rax
		cmp		r13, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_53
		jmp		__block_for_step_5

__block_if_then_53:
		mov		r13, qword [rdi+72]
		mov		r14, qword [rdi+80]
		mov		r11, r12
		imul	r11, 8
		add		r11, r14
		mov		r11, qword [r11+8]
		mov		r11, qword [r11+72]
		and		r13, -1
		and		r11, -1
		xor		rax, rax
		cmp		r13, r11
		setg	al
		mov		r14, rax
		cmp		r14, 1
		je		__block_if_then_54

__block_if_after_49:
		jmp		__block_max_end_5

__block_if_then_54:
		mov		r11, r13

__block_max_end_5:
		mov		qword [rdi+72], r11
		jmp		__block_for_step_5

__block_if_after_50:

__block_for_step_5:
		inc		r12
		jmp		__block_for_cond_5

__block_for_after_5:
		mov		r12, qword [rdi+8]
		mov		r11, qword [rdi+80]
		mov		r13, 0
		imul	r13, 8
		add		r13, r11
		mov		r13, qword [r13+8]
		and		r13, -1
		xor		rax, rax
		cmp		r13, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_55
		jmp		__block_if_after_51

__block_if_then_55:
		mov		r13, qword [rdi+80]
		mov		r11, 0
		imul	r11, 8
		add		r11, r13
		mov		r11, qword [r11+8]
		mov		r11, qword [r11+64]
		mov		r13, 0
		and		r11, -1
		and		r13, -1
		xor		rax, rax
		cmp		r11, r13
		setg	al
		mov		r14, rax
		cmp		r14, 1
		je		__block_if_then_56

__block_if_after_52:
		mov		r11, r13
		jmp		__block_max_end_6

__block_if_then_56:

__block_max_end_6:
		mov		r13, r11
		mov		r11, r12
		add		r11, r13
		mov		r12, r11

__block_if_after_51:
		mov		r13, qword [rdi+80]
		mov		r11, 1
		imul	r11, 8
		add		r11, r13
		mov		r11, qword [r11+8]
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_57
		jmp		__block_if_after_53

__block_if_then_57:
		mov		r13, qword [rdi+80]
		mov		r11, 1
		imul	r11, 8
		add		r11, r13
		mov		r11, qword [r11+8]
		mov		r11, qword [r11+56]
		mov		r14, 0
		and		r11, -1
		and		r14, -1
		xor		rax, rax
		cmp		r11, r14
		setg	al
		mov		r13, rax
		cmp		r13, 1
		je		__block_if_then_58
		jmp		__block_if_after_54

__block_if_then_58:
		jmp		__block_max_end_7

__block_if_after_54:
		mov		r11, r14

__block_max_end_7:
		add		r12, r11

__block_if_after_53:
		mov		r13, qword [rdi+72]
		and		r13, -1
		and		r12, -1
		xor		rax, rax
		cmp		r13, r12
		setg	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_59

__block_if_after_55:
		mov		r11, r12
		jmp		__block_max_end_8

__block_if_then_59:
		mov		r11, r13

__block_max_end_8:
		mov		qword [rdi+72], r11
		add		rsp, 8
		pop		rbp
		pop		rbx
		pop		r14
		pop		r12
		pop		r13
		pop		r15
		ret

# function __member_splay_tree_dfs

__block_dfs_entry_1:
		push	r13
		push	r12
		push	rbx
		push	rbp
		sub		rsp, 8
		mov		rbp, rsp
		mov		r12, 0

__block_for_cond_6:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 2
		setl	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_6
		jmp		__block_for_after_6

__block_for_body_6:
		mov		r13, qword [rsi+80]
		mov		r11, r12
		imul	r11, 8
		add		r11, r13
		mov		r11, qword [r11+8]
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_60
		jmp		__block_for_step_6

__block_if_then_60:
		mov		r11, qword [rsi+80]
		mov		r13, r12
		imul	r13, 8
		add		r13, r11
		mov		r13, qword [r13+8]
		push	r11
		push	rdi
		push	rsi
		push	0
		push	rdi
		mov		rdi, qword [rsp]
		mov		rsi, r13
		add		rsp, 8
		call	__block_dfs_entry_1
		add		rsp, 8
		pop		rsi
		pop		rdi
		pop		r11
		mov		r11, rax
		jmp		__block_for_step_6

__block_if_after_56:

__block_for_step_6:
		inc		r12
		jmp		__block_for_cond_6

__block_for_after_6:
		add		rsp, 8
		pop		rbp
		pop		rbx
		pop		r12
		pop		r13
		ret

# function __member_Node_push_down

__block_push_down_entry_1:
		push	r15
		push	r13
		push	r12
		push	r14
		push	rbx
		push	rbp
		sub		rsp, 8
		mov		rbp, rsp
		mov		r11, qword [rdi+32]
		and		r11, -1
		xor		rax, rax
		cmp		r11, 1
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_61
		jmp		__block_if_after_57

__block_if_then_61:
		mov		r12, 0

__block_for_cond_7:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 2
		setl	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_7
		jmp		__block_for_after_7

__block_for_body_7:
		mov		r13, qword [rdi+80]
		mov		r11, r12
		imul	r11, 8
		add		r11, r13
		mov		r11, qword [r11+8]
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_62
		jmp		__block_for_step_7

__block_if_then_62:
		mov		r13, qword [rdi+80]
		mov		r11, r12
		imul	r11, 8
		add		r11, r13
		mov		r11, qword [r11+8]
		mov		r14, qword [rdi+40]
		mov		r13, r11
		mov		qword [r13+8], r14
		mov		r11, qword [r13+16]
		imul	r11, r14
		mov		qword [r13+24], r11
		and		r14, -1
		xor		rax, rax
		cmp		r14, 0
		setge	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_63
		jmp		__block_if_else_10

__block_if_then_63:
		mov		r11, qword [r13+24]
		mov		qword [r13+56], r11
		mov		r11, qword [r13+24]
		mov		qword [r13+64], r11
		mov		r11, qword [r13+24]
		mov		qword [r13+72], r11
		jmp		__block_if_after_58

__block_if_else_10:
		mov		qword [r13+56], r14
		mov		qword [r13+64], r14
		mov		qword [r13+72], r14

__block_if_after_58:
		mov		qword [r13+32], 1
		mov		qword [r13+40], r14
		jmp		__block_for_step_7

__block_if_after_59:

__block_for_step_7:
		inc		r12
		jmp		__block_for_cond_7

__block_for_after_7:
		mov		qword [rdi+32], 0

__block_if_after_57:
		mov		r11, qword [rdi+48]
		and		r11, -1
		xor		rax, rax
		cmp		r11, 1
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_64
		jmp		__block_if_after_60

__block_if_then_64:
		mov		r12, 0

__block_for_cond_8:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 2
		setl	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_for_body_8
		jmp		__block_for_after_8

__block_for_body_8:
		mov		r11, qword [rdi+80]
		mov		r13, r12
		imul	r13, 8
		add		r13, r11
		mov		r13, qword [r13+8]
		and		r13, -1
		xor		rax, rax
		cmp		r13, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_65
		jmp		__block_for_step_8

__block_if_then_65:
		mov		r11, qword [rdi+80]
		mov		r13, r12
		imul	r13, 8
		add		r13, r11
		mov		r13, qword [r13+8]
		mov		r11, r13
		mov		r13, qword [r11+80]
		mov		r15, 0
		imul	r15, 8
		add		r15, r13
		mov		r15, qword [r15+8]
		mov		r13, qword [r11+80]
		mov		r14, 0
		imul	r14, 8
		add		r14, r13
		mov		r9, qword [r11+80]
		mov		qword [rbp], r9
		mov		r13, 1
		imul	r13, 8
		mov		r9, qword [rbp]
		add		r13, r9
		mov		r13, qword [r13+8]
		mov		qword [r14+8], r13
		mov		r13, qword [r11+80]
		mov		r14, 1
		imul	r14, 8
		add		r14, r13
		mov		qword [r14+8], r15
		mov		r13, qword [r11+56]
		mov		r14, qword [r11+64]
		mov		qword [r11+56], r14
		mov		qword [r11+64], r13
		mov		r13, qword [r11+48]
		xor		r13, 1
		mov		qword [r11+48], r13
		jmp		__block_for_step_8

__block_addtag_ro_entry_2:
		jmp		__block_for_step_8

__block_if_after_61:

__block_for_step_8:
		inc		r12
		jmp		__block_for_cond_8

__block_for_after_8:
		mov		qword [rdi+48], 0

__block_if_after_60:
		add		rsp, 8
		pop		rbp
		pop		rbx
		pop		r14
		pop		r12
		pop		r13
		pop		r15
		ret

# function __member_splay_tree_find

__block_find_entry_1:
		push	r13
		push	r12
		push	r14
		push	rbx
		push	rbp
		mov		rbp, rsp
		mov		r12, qword [rdi]
		mov		r14, 0
		mov		r11, qword [r12+80]
		mov		r13, 0
		imul	r13, 8
		add		r13, r11
		mov		r13, qword [r13+8]
		and		r13, -1
		xor		rax, rax
		cmp		r13, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_66

__block_if_else_11:
		mov		r11, 1
		jmp		__block_while_cond_3

__block_if_then_66:
		mov		r13, qword [r12+80]
		mov		r11, 0
		imul	r11, 8
		add		r11, r13
		mov		r11, qword [r11+8]
		mov		r11, qword [r11+16]
		inc		r11
		jmp		__block_while_cond_3

__block_if_after_62:

__block_while_cond_3:
		mov		r13, r14
		add		r13, r11
		and		r13, -1
		and		rsi, -1
		xor		rax, rax
		cmp		r13, rsi
		setne	al
		mov		r13, rax
		cmp		r13, 1
		je		__block_while_body_3

__block_while_after_3:
		mov		rax, r12
		pop		rbp
		pop		rbx
		pop		r14
		pop		r12
		pop		r13
		ret

__block_while_body_3:
		mov		r13, r14
		add		r13, r11
		and		rsi, -1
		and		r13, -1
		xor		rax, rax
		cmp		rsi, r13
		setl	al
		mov		r13, rax
		cmp		r13, 1
		je		__block_if_then_67
		jmp		__block_if_else_12

__block_if_then_67:
		mov		r11, qword [r12+80]
		mov		r12, 0
		imul	r12, 8
		add		r12, r11
		mov		r12, qword [r12+8]
		jmp		__block_if_after_63

__block_if_else_12:
		mov		r13, r14
		add		r13, r11
		mov		r14, r13
		mov		r11, qword [r12+80]
		mov		r12, 1
		imul	r12, 8
		add		r12, r11
		mov		r12, qword [r12+8]

__block_if_after_63:
		push	r11
		push	rdi
		push	rsi
		push	0
		mov		rdi, r12
		call	__block_push_down_entry_1
		add		rsp, 8
		pop		rsi
		pop		rdi
		pop		r11
		mov		r11, rax
		mov		r11, qword [r12+80]
		mov		r13, 0
		imul	r13, 8
		add		r13, r11
		mov		r13, qword [r13+8]
		and		r13, -1
		xor		rax, rax
		cmp		r13, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_68
		jmp		__block_if_else_13

__block_if_then_68:
		mov		r11, qword [r12+80]
		mov		r13, 0
		imul	r13, 8
		add		r13, r11
		mov		r13, qword [r13+8]
		mov		r11, qword [r13+16]
		inc		r11
		jmp		__block_while_cond_3

__block_if_else_13:
		mov		r11, 1
		jmp		__block_while_cond_3

__block_if_after_64:
		jmp		__block_while_cond_3

# function __member_Node_rot

__block_rot_entry_1:
		push	r15
		push	r13
		push	r12
		push	r14
		push	rbx
		push	rbp
		sub		rsp, 8
		mov		rbp, rsp
		mov		r15, qword [rdi+88]
		mov		r12, qword [r15+80]
		mov		r11, 0
		imul	r11, 8
		add		r11, r12
		mov		r11, qword [r11+8]
		mov		r13, r11
		mov		r11, rdi
		and		r13, -1
		xor		rax, rax
		cmp		r13, 0
		sete	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_if_then_69

__block_if_after_65:
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		sete	al
		mov		r12, rax
		cmp		r12, 1
		je		__block_if_then_70
		jmp		__block_if_after_66

__block_if_then_70:
		mov		r11, 0
		jmp		__block_equ_end_9

__block_if_after_66:
		mov		r12, qword [r13]
		mov		r11, qword [r11]
		and		r12, -1
		and		r11, -1
		xor		rax, rax
		cmp		r12, r11
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_null_25

__block_null_26:
		mov		r11, 0
		jmp		__block_null_27

__block_null_25:
		mov		r11, 1

__block_null_27:
		jmp		__block_equ_end_9

__block_if_then_69:
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_71
		jmp		__block_if_after_67

__block_if_then_71:
		mov		r11, 1
		jmp		__block_equ_end_9

__block_if_after_67:
		mov		r11, 0

__block_equ_end_9:
		cmp		r11, 1
		je		__block_if_then_72

__block_if_else_14:
		mov		r14, 1
		jmp		__block___member_Node_judge_end_5

__block_if_then_72:
		mov		r14, 0

__block___member_Node_judge_end_5:
		mov		r11, qword [r15+80]
		mov		r12, r14
		imul	r12, 8
		add		r12, r11
		mov		r11, qword [rdi+80]
		mov		r13, r14
		xor		r13, 1
		imul	r13, 8
		add		r13, r11
		mov		r13, qword [r13+8]
		mov		qword [r12+8], r13
		mov		r11, qword [rdi+80]
		mov		r12, r14
		xor		r12, 1
		imul	r12, 8
		add		r12, r11
		mov		qword [r12+8], r15
		mov		r11, qword [r15+80]
		mov		r12, r14
		imul	r12, 8
		add		r12, r11
		mov		r12, qword [r12+8]
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_73
		jmp		__block_if_after_68

__block_if_then_73:
		mov		r11, qword [r15+80]
		imul	r14, 8
		add		r14, r11
		mov		r14, qword [r14+8]
		mov		qword [r14+88], r15

__block_if_after_68:
		mov		r11, qword [r15+88]
		mov		qword [rdi+88], r11
		mov		qword [r15+88], rdi
		mov		r11, qword [rdi+88]
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		setne	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_74
		jmp		__block_if_after_69

__block_if_then_74:
		mov		r11, qword [rdi+88]
		mov		r14, qword [r11+80]
		mov		r11, qword [rdi+88]
		mov		r12, r15
		mov		r13, qword [r11+80]
		mov		r11, 0
		imul	r11, 8
		add		r11, r13
		mov		r11, qword [r11+8]
		and		r11, -1
		xor		rax, rax
		cmp		r11, 0
		sete	al
		mov		r13, rax
		cmp		r13, 1
		je		__block_if_then_75

__block_if_after_70:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r13, rax
		cmp		r13, 1
		je		__block_if_then_76

__block_if_after_71:
		mov		r11, qword [r11]
		mov		r12, qword [r12]
		and		r11, -1
		and		r12, -1
		xor		rax, rax
		cmp		r11, r12
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_null_28
		jmp		__block_null_29

__block_null_28:
		mov		r11, 1
		jmp		__block_null_30

__block_null_29:
		mov		r11, 0

__block_null_30:
		jmp		__block_equ_end_10

__block_if_then_76:
		mov		r11, 0
		jmp		__block_equ_end_10

__block_if_then_75:
		and		r12, -1
		xor		rax, rax
		cmp		r12, 0
		sete	al
		mov		r11, rax
		cmp		r11, 1
		je		__block_if_then_77

__block_if_after_72:
		mov		r11, 0
		jmp		__block_equ_end_10

__block_if_then_77:
		mov		r11, 1

__block_equ_end_10:
		cmp		r11, 1
		je		__block_if_then_78
		jmp		__block_if_else_15

__block_if_then_78:
		mov		r11, 0
		jmp		__block___member_Node_judge_end_6

__block_if_else_15:
		mov		r11, 1

__block___member_Node_judge_end_6:
		imul	r11, 8
		add		r11, r14
		mov		qword [r11+8], rdi

__block_if_after_69:
		push	r11
		push	rdi
		mov		rdi, r15
		call	__block_push_up_entry_1
		pop		rdi
		pop		r11
		mov		r11, rax
		add		rsp, 8
		pop		rbp
		pop		rbx
		pop		r14
		pop		r12
		pop		r13
		pop		r15
		ret


# built-in functions

default rel

global __builtin_string_concat
global __builtin_string_equal
global __builtin_string_inequal
global __builtin_string_less
global __builtin_string_less_equal
global _Z5printPc
global _Z7printlnPc
global _Z8printInti
global _Z10printlnInti
global _Z9getStringv
global _Z6getIntv
global _Z8toStringi
global _Z27__member___string_substringPcii
global _Z26__member___string_parseIntPc
global _Z21__member___string_ordPci

extern getchar
extern strlen
extern scanf
extern __stack_chk_fail
extern putchar
extern puts
extern printf
extern strcmp
extern malloc


SECTION .text   

__builtin_string_concat:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     qword [rbp-28H], rdi
        mov     qword [rbp-30H], rsi
        mov     rax, qword [rbp-28H]
        mov     rax, qword [rax]
        mov     dword [rbp-10H], eax
        mov     rax, qword [rbp-30H]
        mov     rax, qword [rax]
        mov     dword [rbp-0CH], eax
        mov     eax, dword [rbp-10H]
        lea     edx, [rax+9H]
        mov     eax, dword [rbp-0CH]
        add     eax, edx
        cdqe
        mov     rdi, rax
        call    malloc
        mov     qword [rbp-8H], rax
        mov     edx, dword [rbp-10H]
        mov     eax, dword [rbp-0CH]
        add     eax, edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        mov     qword [rax], rdx
        add     qword [rbp-28H], 8
        add     qword [rbp-30H], 8
        add     qword [rbp-8H], 8
        mov     dword [rbp-1CH], -1
        mov     dword [rbp-18H], 0
L_001:  mov     eax, dword [rbp-18H]
        cmp     eax, dword [rbp-10H]
        jge     L_002
        add     dword [rbp-1CH], 1
        mov     eax, dword [rbp-1CH]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rdx, rax
        mov     eax, dword [rbp-18H]
        movsxd  rcx, eax
        mov     rax, qword [rbp-28H]
        add     rax, rcx
        movzx   eax, byte [rax]
        mov     byte [rdx], al
        add     dword [rbp-18H], 1
        jmp     L_001

L_002:  mov     dword [rbp-14H], 0
L_003:  mov     eax, dword [rbp-14H]
        cmp     eax, dword [rbp-0CH]
        jge     L_004
        add     dword [rbp-1CH], 1
        mov     eax, dword [rbp-1CH]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rdx, rax
        mov     eax, dword [rbp-14H]
        movsxd  rcx, eax
        mov     rax, qword [rbp-30H]
        add     rax, rcx
        movzx   eax, byte [rax]
        mov     byte [rdx], al
        add     dword [rbp-14H], 1
        jmp     L_003

L_004:  mov     eax, dword [rbp-1CH]
        cdqe
        lea     rdx, [rax+1H]
        mov     rax, qword [rbp-8H]
        add     rax, rdx
        mov     byte [rax], 0
        mov     rax, qword [rbp-8H]
        sub     rax, 8
        leave
        ret


__builtin_string_equal:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        test    eax, eax
        sete    al
        movzx   eax, al
        leave
        ret


__builtin_string_inequal:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        test    eax, eax
        setne   al
        movzx   eax, al
        leave
        ret


__builtin_string_less:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        shr     eax, 31
        movzx   eax, al
        leave
        ret


__builtin_string_less_equal:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     qword [rbp-10H], rsi
        mov     rax, qword [rbp-10H]
        lea     rdx, [rax+8H]
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rdx
        mov     rdi, rax
        call    strcmp
        test    eax, eax
        setle   al
        movzx   eax, al
        leave
        ret


_Z5printPc:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rax
        mov     edi, L_043
        mov     eax, 0
        call    printf
        nop
        leave
        ret


_Z7printlnPc:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     qword [rbp-8H], rdi
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rdi, rax
        call    puts
        nop
        leave
        ret


_Z8printInti:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     dword [rbp-44H], edi


        mov     rax, qword [fs:abs 28H]
        mov     qword [rbp-8H], rax
        xor     eax, eax
        cmp     dword [rbp-44H], 0
        jnz     L_005
        mov     edi, 48
        call    putchar
L_005:  cmp     dword [rbp-44H], 0
        jns     L_006
        neg     dword [rbp-44H]
        mov     edi, 45
        call    putchar
L_006:  mov     dword [rbp-38H], 0
L_007:  cmp     dword [rbp-44H], 0
        jle     L_008
        mov     esi, dword [rbp-38H]
        lea     eax, [rsi+1H]
        mov     dword [rbp-38H], eax
        mov     ecx, dword [rbp-44H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        shl     eax, 2
        add     eax, edx
        add     eax, eax
        sub     ecx, eax
        mov     edx, ecx
        movsxd  rax, esi
        mov     dword [rbp+rax*4-30H], edx
        mov     ecx, dword [rbp-44H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        mov     dword [rbp-44H], eax
        jmp     L_007

L_008:  mov     eax, dword [rbp-38H]
        sub     eax, 1
        mov     dword [rbp-34H], eax
L_009:  cmp     dword [rbp-34H], 0
        js      L_010
        mov     eax, dword [rbp-34H]
        cdqe
        mov     eax, dword [rbp+rax*4-30H]
        add     eax, 48
        mov     edi, eax
        call    putchar
        sub     dword [rbp-34H], 1
        jmp     L_009

L_010:  nop
        mov     rax, qword [rbp-8H]


        xor     rax, qword [fs:abs 28H]
        jz      L_011
        call    __stack_chk_fail
L_011:  leave
        ret


_Z10printlnInti:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     dword [rbp-44H], edi


        mov     rax, qword [fs:abs 28H]
        mov     qword [rbp-8H], rax
        xor     eax, eax
        cmp     dword [rbp-44H], 0
        jnz     L_012
        mov     edi, 48
        call    putchar
L_012:  cmp     dword [rbp-44H], 0
        jns     L_013
        neg     dword [rbp-44H]
        mov     edi, 45
        call    putchar
L_013:  mov     dword [rbp-38H], 0
L_014:  cmp     dword [rbp-44H], 0
        jle     L_015
        mov     esi, dword [rbp-38H]
        lea     eax, [rsi+1H]
        mov     dword [rbp-38H], eax
        mov     ecx, dword [rbp-44H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        shl     eax, 2
        add     eax, edx
        add     eax, eax
        sub     ecx, eax
        mov     edx, ecx
        movsxd  rax, esi
        mov     dword [rbp+rax*4-30H], edx
        mov     ecx, dword [rbp-44H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        mov     dword [rbp-44H], eax
        jmp     L_014

L_015:  mov     eax, dword [rbp-38H]
        sub     eax, 1
        mov     dword [rbp-34H], eax
L_016:  cmp     dword [rbp-34H], 0
        js      L_017
        mov     eax, dword [rbp-34H]
        cdqe
        mov     eax, dword [rbp+rax*4-30H]
        add     eax, 48
        mov     edi, eax
        call    putchar
        sub     dword [rbp-34H], 1
        jmp     L_016

L_017:  mov     edi, 10
        call    putchar
        nop
        mov     rax, qword [rbp-8H]


        xor     rax, qword [fs:abs 28H]
        jz      L_018
        call    __stack_chk_fail
L_018:  leave
        ret


_Z9getStringv:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        mov     edi, 266
        call    malloc
        mov     qword [rbp-8H], rax
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rsi, rax
        mov     edi, L_043
        mov     eax, 0
        call    scanf
        mov     rax, qword [rbp-8H]
        add     rax, 8
        mov     rdi, rax
        call    strlen
        mov     rdx, rax
        mov     rax, qword [rbp-8H]
        mov     qword [rax], rdx
        mov     rax, qword [rbp-8H]
        leave
        ret


_Z6getIntv:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 16
        call    getchar
        mov     byte [rbp-6H], al
        mov     byte [rbp-5H], 0
L_019:  cmp     byte [rbp-6H], 47
        jle     L_020
        cmp     byte [rbp-6H], 57
        jle     L_022
L_020:  cmp     byte [rbp-6H], 45
        jnz     L_021
        mov     byte [rbp-5H], 1
L_021:  call    getchar
        mov     byte [rbp-6H], al
        jmp     L_019

L_022:  movsx   eax, byte [rbp-6H]
        sub     eax, 48
        mov     dword [rbp-4H], eax
        call    getchar
        mov     byte [rbp-6H], al
L_023:  cmp     byte [rbp-6H], 47
        jle     L_024
        cmp     byte [rbp-6H], 57
        jg      L_024
        mov     edx, dword [rbp-4H]
        mov     eax, edx
        shl     eax, 2
        add     eax, edx
        add     eax, eax
        mov     edx, eax
        movsx   eax, byte [rbp-6H]
        add     eax, edx
        sub     eax, 48
        mov     dword [rbp-4H], eax
        call    getchar
        mov     byte [rbp-6H], al
        jmp     L_023

L_024:  cmp     byte [rbp-5H], 0
        jz      L_025
        mov     eax, dword [rbp-4H]
        neg     eax
        jmp     L_026

L_025:  mov     eax, dword [rbp-4H]
L_026:  leave
        ret


_Z8toStringi:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 96
        mov     dword [rbp-54H], edi


        mov     rax, qword [fs:abs 28H]
        mov     qword [rbp-8H], rax
        xor     eax, eax
        mov     dword [rbp-44H], 0
        mov     dword [rbp-40H], 0
        cmp     dword [rbp-54H], 0
        jns     L_027
        mov     dword [rbp-44H], 1
        neg     dword [rbp-54H]
L_027:  cmp     dword [rbp-54H], 0
        jnz     L_028
        add     dword [rbp-40H], 1
        mov     eax, dword [rbp-40H]
        cdqe
        mov     dword [rbp+rax*4-30H], 0
        jmp     L_029

L_028:  cmp     dword [rbp-54H], 0
        jz      L_029
        add     dword [rbp-40H], 1
        mov     ecx, dword [rbp-54H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        shl     eax, 2
        add     eax, edx
        add     eax, eax
        sub     ecx, eax
        mov     edx, ecx
        mov     eax, dword [rbp-40H]
        cdqe
        mov     dword [rbp+rax*4-30H], edx
        mov     ecx, dword [rbp-54H]
        mov     edx, 1717986919
        mov     eax, ecx
        imul    edx
        sar     edx, 2
        mov     eax, ecx
        sar     eax, 31
        sub     edx, eax
        mov     eax, edx
        mov     dword [rbp-54H], eax
        jmp     L_028

L_029:  mov     edx, dword [rbp-40H]
        mov     eax, dword [rbp-44H]
        add     eax, edx
        add     eax, 9
        cdqe
        mov     rdi, rax
        call    malloc
        mov     qword [rbp-38H], rax
        mov     edx, dword [rbp-40H]
        mov     eax, dword [rbp-44H]
        add     eax, edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-38H]
        mov     qword [rax], rdx
        add     qword [rbp-38H], 8
        mov     edx, dword [rbp-40H]
        mov     eax, dword [rbp-44H]
        add     eax, edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-38H]
        add     rax, rdx
        mov     byte [rax], 0
        cmp     dword [rbp-44H], 0
        jz      L_030
        mov     rax, qword [rbp-38H]
        mov     byte [rax], 45
L_030:  mov     dword [rbp-3CH], 0
L_031:  mov     eax, dword [rbp-3CH]
        cmp     eax, dword [rbp-40H]
        jge     L_032
        mov     edx, dword [rbp-3CH]
        mov     eax, dword [rbp-44H]
        add     eax, edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-38H]
        add     rdx, rax
        mov     eax, dword [rbp-40H]
        sub     eax, dword [rbp-3CH]
        cdqe
        mov     eax, dword [rbp+rax*4-30H]
        add     eax, 48
        mov     byte [rdx], al
        add     dword [rbp-3CH], 1
        jmp     L_031

L_032:  mov     rax, qword [rbp-38H]
        sub     rax, 8
        mov     rsi, qword [rbp-8H]


        xor     rsi, qword [fs:abs 28H]
        jz      L_033
        call    __stack_chk_fail
L_033:  leave
        ret


_Z27__member___string_substringPcii:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 32
        mov     qword [rbp-18H], rdi
        mov     dword [rbp-1CH], esi
        mov     dword [rbp-20H], edx
        mov     eax, dword [rbp-20H]
        sub     eax, dword [rbp-1CH]
        add     eax, 1
        mov     dword [rbp-0CH], eax
        mov     eax, dword [rbp-0CH]
        add     eax, 9
        cdqe
        mov     rdi, rax
        call    malloc
        mov     qword [rbp-8H], rax
        mov     eax, dword [rbp-0CH]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        mov     qword [rax], rdx
        mov     eax, dword [rbp-1CH]
        cdqe
        add     rax, 8
        add     qword [rbp-18H], rax
        add     qword [rbp-8H], 8
        mov     dword [rbp-10H], 0
L_034:  mov     eax, dword [rbp-10H]
        cmp     eax, dword [rbp-0CH]
        jge     L_035
        mov     eax, dword [rbp-10H]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rdx, rax
        mov     eax, dword [rbp-10H]
        movsxd  rcx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rcx
        movzx   eax, byte [rax]
        mov     byte [rdx], al
        add     dword [rbp-10H], 1
        jmp     L_034

L_035:  mov     eax, dword [rbp-0CH]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rax, rdx
        mov     byte [rax], 0
        mov     rax, qword [rbp-8H]
        sub     rax, 8
        leave
        ret


_Z26__member___string_parseIntPc:
        push    rbp
        mov     rbp, rsp
        mov     qword [rbp-18H], rdi
        add     qword [rbp-18H], 8
        mov     byte [rbp-9H], 0
        mov     dword [rbp-8H], 0
L_036:  mov     eax, dword [rbp-8H]
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        cmp     al, 47
        jle     L_037
        mov     eax, dword [rbp-8H]
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        cmp     al, 57
        jle     L_038
L_037:  mov     eax, dword [rbp-8H]
        lea     edx, [rax+1H]
        mov     dword [rbp-8H], edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        cmp     al, 45
        sete    al
        test    al, al
        jz      L_036
        mov     byte [rbp-9H], 1
        jmp     L_036

L_038:  mov     eax, dword [rbp-8H]
        lea     edx, [rax+1H]
        mov     dword [rbp-8H], edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        movsx   eax, al
        sub     eax, 48
        mov     dword [rbp-4H], eax
L_039:  mov     eax, dword [rbp-8H]
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        cmp     al, 47
        jle     L_040
        mov     eax, dword [rbp-8H]
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        cmp     al, 57
        jg      L_040
        mov     edx, dword [rbp-4H]
        mov     eax, edx
        shl     eax, 2
        add     eax, edx
        add     eax, eax
        mov     ecx, eax
        mov     eax, dword [rbp-8H]
        lea     edx, [rax+1H]
        mov     dword [rbp-8H], edx
        movsxd  rdx, eax
        mov     rax, qword [rbp-18H]
        add     rax, rdx
        movzx   eax, byte [rax]
        movsx   eax, al
        add     eax, ecx
        sub     eax, 48
        mov     dword [rbp-4H], eax
        jmp     L_039

L_040:  cmp     byte [rbp-9H], 0
        jz      L_041
        mov     eax, dword [rbp-4H]
        neg     eax
        jmp     L_042

L_041:  mov     eax, dword [rbp-4H]
L_042:  pop     rbp
        ret


_Z21__member___string_ordPci:
        push    rbp
        mov     rbp, rsp
        mov     qword [rbp-8H], rdi
        mov     dword [rbp-0CH], esi
        add     dword [rbp-0CH], 8
        mov     eax, dword [rbp-0CH]
        movsxd  rdx, eax
        mov     rax, qword [rbp-8H]
        add     rax, rdx
        movzx   eax, byte [rax]
        movsx   eax, al
        pop     rbp
        ret



SECTION .data   


SECTION .bss    


SECTION .rodata 

L_043:
        db 25H, 73H, 00H


